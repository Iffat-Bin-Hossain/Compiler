<ID, include>
<RELOP, <>
<ID, bits>
<MULOP, />
<ID, stdc>
<INCOP, ++>
<ID, h>
<RELOP, >>
<ID, include>
<SINGLE LINE STRING, 2005087_SymbolInfo.cpp>
<ID, using>
<ID, namespace>
<ID, std>
<SEMICOLON, ;>
<ID, static>
<ID, unsigned>
<ID, long>
<ID, long>
<ID, sdbm>
<LPAREN, (>
<ID, string>
<ID, str>
<RPAREN, )>
<LCURL, {>
<ID, unsigned>
<ID, long>
<ID, long>
<ID, hash>
<ASSIGNOP, =>
<CONST_INT, 0>
<SEMICOLON, ;>
<FOR, for>
<LPAREN, (>
<INT, int>
<ID, i>
<ASSIGNOP, =>
<CONST_INT, 0>
<SEMICOLON, ;>
<ID, i>
<RELOP, <>
<ID, str>
<ID, length>
<LPAREN, (>
<RPAREN, )>
<SEMICOLON, ;>
<ID, i>
<INCOP, ++>
<RPAREN, )>
<LCURL, {>
<ID, hash>
<ASSIGNOP, =>
<ID, str>
<LSQUARE, [>
<ID, i>
<RSQUARE, ]>
<ADDOP, +>
<LPAREN, (>
<ID, hash>
<BITOP, <<>
<CONST_INT, 6>
<RPAREN, )>
<ADDOP, +>
<LPAREN, (>
<ID, hash>
<BITOP, <<>
<CONST_INT, 16>
<RPAREN, )>
<ADDOP, ->
<ID, hash>
<SEMICOLON, ;>
<RCURL, }>
<RETURN, return>
<ID, hash>
<SEMICOLON, ;>
<RCURL, }>
<ID, class>
<ID, ScopeTable>
<LCURL, {>
<ID, private>
<ID, SymbolInfo>
<MULOP, *>
<MULOP, *>
<ID, scopeTable>
<SEMICOLON, ;>
<ID, string>
<ID, id>
<SEMICOLON, ;>
<ID, unsigned>
<ID, long>
<ID, long>
<ID, tableSize>
<SEMICOLON, ;>
<ID, ScopeTable>
<MULOP, *>
<ID, parentScope>
<SEMICOLON, ;>
<INT, int>
<ID, scopeNo>
<SEMICOLON, ;>
<ID, public>
<ID, ScopeTable>
<LPAREN, (>
<ID, unsigned>
<ID, long>
<ID, long>
<ID, totalSize>
<RPAREN, )>
<LCURL, {>
<ID, tableSize>
<ASSIGNOP, =>
<ID, totalSize>
<SEMICOLON, ;>
<ID, scopeTable>
<ASSIGNOP, =>
<ID, new>
<ID, SymbolInfo>
<MULOP, *>
<LSQUARE, [>
<ID, tableSize>
<RSQUARE, ]>
<SEMICOLON, ;>
<FOR, for>
<LPAREN, (>
<ID, unsigned>
<ID, long>
<ID, long>
<ID, i>
<ASSIGNOP, =>
<CONST_INT, 0>
<SEMICOLON, ;>
<ID, i>
<RELOP, <>
<ID, tableSize>
<SEMICOLON, ;>
<INCOP, ++>
<ID, i>
<RPAREN, )>
<LCURL, {>
<ID, scopeTable>
<LSQUARE, [>
<ID, i>
<RSQUARE, ]>
<ASSIGNOP, =>
<ID, NULL>
<SEMICOLON, ;>
<RCURL, }>
<ID, id>
<ASSIGNOP, =>
<SINGLE LINE STRING, >
<SEMICOLON, ;>
<ID, parentScope>
<ASSIGNOP, =>
<ID, NULL>
<SEMICOLON, ;>
<ID, scopeNo>
<ASSIGNOP, =>
<CONST_INT, 0>
<SEMICOLON, ;>
<RCURL, }>
<VOID, void>
<ID, setParentScope>
<LPAREN, (>
<ID, ScopeTable>
<MULOP, *>
<ID, ParentScope>
<RPAREN, )>
<LCURL, {>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, parentScope>
<ASSIGNOP, =>
<ID, ParentScope>
<SEMICOLON, ;>
<RCURL, }>
<ID, ScopeTable>
<MULOP, *>
<ID, getParentScope>
<LPAREN, (>
<RPAREN, )>
<LCURL, {>
<RETURN, return>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, parentScope>
<SEMICOLON, ;>
<RCURL, }>
<VOID, void>
<ID, setScopeNo>
<LPAREN, (>
<INT, int>
<ID, scopeNo>
<RPAREN, )>
<LCURL, {>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, scopeNo>
<ASSIGNOP, =>
<ID, scopeNo>
<SEMICOLON, ;>
<RCURL, }>
<INT, int>
<ID, getScopeNo>
<LPAREN, (>
<RPAREN, )>
<LCURL, {>
<RETURN, return>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, scopeNo>
<SEMICOLON, ;>
<RCURL, }>
<VOID, void>
<ID, setId>
<LPAREN, (>
<ID, string>
<ID, id>
<RPAREN, )>
<LCURL, {>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, id>
<ASSIGNOP, =>
<ID, id>
<SEMICOLON, ;>
<RCURL, }>
<ID, string>
<ID, getId>
<LPAREN, (>
<RPAREN, )>
<LCURL, {>
<RETURN, return>
<ID, this>
<ADDOP, ->
<RELOP, >>
<ID, id>
<SEMICOLON, ;>
<RCURL, }>
<ID, unsigned>
<ID, long>
<ID, long>
<ID, hashFunction>
<LPAREN, (>
<ID, SymbolInfo>
<MULOP, *>
<ID, sInfo>
<RPAREN, )>
<LCURL, {>
<RETURN, return>
<ID, sdbm>
<LPAREN, (>
<ID, sInfo>
<ADDOP, ->
<RELOP, >>
<ID, getName>
<LPAREN, (>
<RPAREN, )>
<RPAREN, )>
<MULOP, %>
<ID, tableSize>
<SEMICOLON, ;>
<RCURL, }>
<ID, bool>
<ID, Insert>
<LPAREN, (>
<ID, SymbolInfo>
<MULOP, *>
<ID, sInfo>
<RPAREN, )>
<LCURL, {>
<ID, unsigned>
<ID, long>
<ID, long>
<ID, index>
<ASSIGNOP, =>
<ID, hashFunction>
<LPAREN, (>
<ID, sInfo>
<RPAREN, )>
<SEMICOLON, ;>
<ID, SymbolInfo>
<MULOP, *>
<ID, current>
<ASSIGNOP, =>
<ID, scopeTable>
<LSQUARE, [>
<ID, index>
<RSQUARE, ]>
<SEMICOLON, ;>
<ID, SymbolInfo>
<MULOP, *>
<ID, parent>
<ASSIGNOP, =>
<ID, NULL>
<SEMICOLON, ;>
<WHILE, while>
<LPAREN, (>
<ID, current>
<RELOP, !=>
<ID, NULL>
<RPAREN, )>
<LCURL, {>
<IF, if>
<LPAREN, (>
<ID, current>
<ADDOP, ->
<RELOP, >>
<ID, getName>
<LPAREN, (>
<RPAREN, )>
<RELOP, ==>
<ID, sInfo>
<ADDOP, ->
<RELOP, >>
<ID, getName>
<LPAREN, (>
<RPAREN, )>
<LOGICOP, &&>
<ID, current>
<ADDOP, ->
<RELOP, >>
<ID, getType>
<LPAREN, (>
<RPAREN, )>
<RELOP, ==>
<ID, sInfo>
<ADDOP, ->
<RELOP, >>
<ID, getType>
<LPAREN, (>
<RPAREN, )>
<RPAREN, )>
<LCURL, {>
<RETURN, return>
<ID, false>
<SEMICOLON, ;>
<RCURL, }>
<ID, parent>
<ASSIGNOP, =>
<ID, current>
<SEMICOLON, ;>
<ID, current>
<ASSIGNOP, =>
<ID, current>
<ADDOP, ->
<RELOP, >>
<ID, getNext>
<LPAREN, (>
<RPAREN, )>
<SEMICOLON, ;>
<RCURL, }>
<IF, if>
<LPAREN, (>
<ID, scopeTable>
<LSQUARE, [>
<ID, index>
<RSQUARE, ]>
<RELOP, ==>
<ID, NULL>
<RPAREN, )>
<LCURL, {>
<ID, scopeTable>
<LSQUARE, [>
<ID, index>
<RSQUARE, ]>
<ASSIGNOP, =>
<ID, sInfo>
<SEMICOLON, ;>
<RCURL, }>
<ELSE, else>
<LCURL, {>
<ID, parent>
<ADDOP, ->
<RELOP, >>
<ID, setNext>
<LPAREN, (>
<ID, sInfo>
<RPAREN, )>
<SEMICOLON, ;>
<RCURL, }>
<RETURN, return>
<ID, true>
<SEMICOLON, ;>
<RCURL, }>
<ID, bool>
<ID, Delete>
<LPAREN, (>
<ID, SymbolInfo>
<MULOP, *>
<ID, sInfo>
<RPAREN, )>
<LCURL, {>
<ID, unsigned>
<ID, long>
<ID, long>
<ID, index>
<ASSIGNOP, =>
<ID, hashFunction>
<LPAREN, (>
<ID, sInfo>
<RPAREN, )>
<SEMICOLON, ;>
<ID, SymbolInfo>
<MULOP, *>
<ID, current>
<ASSIGNOP, =>
<ID, scopeTable>
<LSQUARE, [>
<ID, index>
<RSQUARE, ]>
<SEMICOLON, ;>
<ID, SymbolInfo>
<MULOP, *>
<ID, previous>
<ASSIGNOP, =>
<ID, NULL>
<SEMICOLON, ;>
<WHILE, while>
<LPAREN, (>
<ID, current>
<RELOP, !=>
<ID, NULL>
<LOGICOP, &&>
<NOT, !>
<LPAREN, (>
<ID, current>
<ADDOP, ->
<RELOP, >>
<ID, getName>
<LPAREN, (>
<RPAREN, )>
<RELOP, ==>
<ID, sInfo>
<ADDOP, ->
<RELOP, >>
<ID, getName>
<LPAREN, (>
<RPAREN, )>
<RPAREN, )>
<RPAREN, )>
<LCURL, {>
<ID, previous>
<ASSIGNOP, =>
<ID, current>
<SEMICOLON, ;>
<ID, current>
<ASSIGNOP, =>
<ID, current>
<ADDOP, ->
<RELOP, >>
<ID, getNext>
<LPAREN, (>
<RPAREN, )>
<SEMICOLON, ;>
<RCURL, }>
<IF, if>
<LPAREN, (>
<ID, current>
<RELOP, ==>
<ID, NULL>
<RPAREN, )>
<LCURL, {>
<RETURN, return>
<ID, false>
<SEMICOLON, ;>
<RCURL, }>
<ELSE, else>
<LCURL, {>
<IF, if>
<LPAREN, (>
<ID, previous>
<RELOP, ==>
<ID, NULL>
<RPAREN, )>
<LCURL, {>
<ID, scopeTable>
<LSQUARE, [>
<ID, index>
<RSQUARE, ]>
<ASSIGNOP, =>
<ID, current>
<ADDOP, ->
<RELOP, >>
<ID, getNext>
<LPAREN, (>
<RPAREN, )>
<SEMICOLON, ;>
<RCURL, }>
<ELSE, else>
<LCURL, {>
<ID, previous>
<ADDOP, ->
<RELOP, >>
<ID, setNext>
<LPAREN, (>
<ID, current>
<ADDOP, ->
<RELOP, >>
<ID, getNext>
<LPAREN, (>
<RPAREN, )>
<RPAREN, )>
<SEMICOLON, ;>
<RCURL, }>
<ID, delete>
<ID, current>
<SEMICOLON, ;>
<RETURN, return>
<ID, true>
<SEMICOLON, ;>
<RCURL, }>
<RCURL, }>
<ID, SymbolInfo>
<MULOP, *>
<ID, Lookup>
<LPAREN, (>
<ID, SymbolInfo>
<MULOP, *>
<ID, sInfo>
<RPAREN, )>
<LCURL, {>
<ID, unsigned>
<ID, long>
<ID, long>
<ID, index>
<ASSIGNOP, =>
<ID, hashFunction>
<LPAREN, (>
<ID, sInfo>
<RPAREN, )>
<SEMICOLON, ;>
<ID, SymbolInfo>
<MULOP, *>
<ID, current>
<ASSIGNOP, =>
<ID, scopeTable>
<LSQUARE, [>
<ID, index>
<RSQUARE, ]>
<SEMICOLON, ;>
<WHILE, while>
<LPAREN, (>
<ID, current>
<RELOP, !=>
<ID, NULL>
<RPAREN, )>
<LCURL, {>
<IF, if>
<LPAREN, (>
<ID, current>
<ADDOP, ->
<RELOP, >>
<ID, getName>
<LPAREN, (>
<RPAREN, )>
<RELOP, ==>
<ID, sInfo>
<ADDOP, ->
<RELOP, >>
<ID, getName>
<LPAREN, (>
<RPAREN, )>
<RPAREN, )>
<LCURL, {>
<RETURN, return>
<ID, current>
<SEMICOLON, ;>
<RCURL, }>
<ID, current>
<ASSIGNOP, =>
<ID, current>
<ADDOP, ->
<RELOP, >>
<ID, getNext>
<LPAREN, (>
<RPAREN, )>
<SEMICOLON, ;>
<RCURL, }>
<RETURN, return>
<ID, NULL>
<SEMICOLON, ;>
<RCURL, }>
<ID, unsigned>
<ID, long>
<ID, long>
<ID, Position>
<LPAREN, (>
<ID, SymbolInfo>
<MULOP, *>
<ID, sInfo>
<RPAREN, )>
<LCURL, {>
<ID, unsigned>
<ID, long>
<ID, long>
<ID, bucketNo>
<ASSIGNOP, =>
<ID, hashFunction>
<LPAREN, (>
<ID, sInfo>
<RPAREN, )>
<SEMICOLON, ;>
<ID, unsigned>
<ID, long>
<ID, long>
<ID, chainIndex>
<ASSIGNOP, =>
<CONST_INT, 0>
<SEMICOLON, ;>
<ID, SymbolInfo>
<MULOP, *>
<ID, current>
<ASSIGNOP, =>
<ID, scopeTable>
<LSQUARE, [>
<ID, bucketNo>
<RSQUARE, ]>
<SEMICOLON, ;>
<WHILE, while>
<LPAREN, (>
<ID, current>
<RELOP, !=>
<ID, NULL>
<RPAREN, )>
<LCURL, {>
<IF, if>
<LPAREN, (>
<ID, current>
<ADDOP, ->
<RELOP, >>
<ID, getName>
<LPAREN, (>
<RPAREN, )>
<RELOP, ==>
<ID, sInfo>
<ADDOP, ->
<RELOP, >>
<ID, getName>
<LPAREN, (>
<RPAREN, )>
<RPAREN, )>
<LCURL, {>
<BREAK, break>
<SEMICOLON, ;>
<RCURL, }>
<ID, current>
<ASSIGNOP, =>
<ID, current>
<ADDOP, ->
<RELOP, >>
<ID, getNext>
<LPAREN, (>
<RPAREN, )>
<SEMICOLON, ;>
<ID, chainIndex>
<INCOP, ++>
<SEMICOLON, ;>
<RCURL, }>
<RETURN, return>
<ID, chainIndex>
<SEMICOLON, ;>
<RCURL, }>
<VOID, void>
<ID, Print>
<LPAREN, (>
<ID, ofstream>
<BITOP, &>
<ID, fout>
<RPAREN, )>
<LCURL, {>
<ID, fout>
<BITOP, <<>
<SINGLE LINE STRING, 	ScopeTable# >
<BITOP, <<>
<ID, id>
<BITOP, <<>
<ID, endl>
<SEMICOLON, ;>
<FOR, for>
<LPAREN, (>
<ID, unsigned>
<ID, long>
<ID, long>
<ID, i>
<ASSIGNOP, =>
<CONST_INT, 0>
<SEMICOLON, ;>
<ID, i>
<RELOP, <>
<ID, tableSize>
<SEMICOLON, ;>
<ID, i>
<INCOP, ++>
<RPAREN, )>
<LCURL, {>
<ID, fout>
<BITOP, <<>
<SINGLE LINE STRING, 	>
<SEMICOLON, ;>
<IF, if>
<LPAREN, (>
<ID, scopeTable>
<LSQUARE, [>
<ID, i>
<RSQUARE, ]>
<RELOP, ==>
<ID, NULL>
<RPAREN, )>
<LCURL, {>
<ID, fout>
<BITOP, <<>
<ID, i>
<ADDOP, +>
<CONST_INT, 1>
<BITOP, <<>
<ID, endl>
<SEMICOLON, ;>
<RCURL, }>
<ELSE, else>
<LCURL, {>
<ID, fout>
<BITOP, <<>
<ID, i>
<ADDOP, +>
<CONST_INT, 1>
<BITOP, <<>
<SINGLE LINE STRING,  --> >
<SEMICOLON, ;>
<ID, SymbolInfo>
<MULOP, *>
<ID, current>
<ASSIGNOP, =>
<ID, scopeTable>
<LSQUARE, [>
<ID, i>
<RSQUARE, ]>
<SEMICOLON, ;>
<WHILE, while>
<LPAREN, (>
<ID, current>
<RELOP, !=>
<ID, NULL>
<RPAREN, )>
<LCURL, {>
<IF, if>
<LPAREN, (>
<ID, current>
<ADDOP, ->
<RELOP, >>
<ID, getNext>
<LPAREN, (>
<RPAREN, )>
<RELOP, ==>
<ID, NULL>
<RPAREN, )>
<LCURL, {>
<ID, fout>
<BITOP, <<>
<SINGLE LINE STRING, (>
<BITOP, <<>
<ID, current>
<ADDOP, ->
<RELOP, >>
<ID, getName>
<LPAREN, (>
<RPAREN, )>
<BITOP, <<>
<SINGLE LINE STRING, ,>
<BITOP, <<>
<ID, current>
<ADDOP, ->
<RELOP, >>
<ID, getType>
<LPAREN, (>
<RPAREN, )>
<BITOP, <<>
<SINGLE LINE STRING, )>
<BITOP, <<>
<ID, endl>
<SEMICOLON, ;>
<RCURL, }>
<ELSE, else>
<LCURL, {>
<ID, fout>
<BITOP, <<>
<SINGLE LINE STRING, (>
<BITOP, <<>
<ID, current>
<ADDOP, ->
<RELOP, >>
<ID, getName>
<LPAREN, (>
<RPAREN, )>
<BITOP, <<>
<SINGLE LINE STRING, ,>
<BITOP, <<>
<ID, current>
<ADDOP, ->
<RELOP, >>
<ID, getType>
<LPAREN, (>
<RPAREN, )>
<BITOP, <<>
<SINGLE LINE STRING, ) --> >
<SEMICOLON, ;>
<RCURL, }>
<ID, current>
<ASSIGNOP, =>
<ID, current>
<ADDOP, ->
<RELOP, >>
<ID, getNext>
<LPAREN, (>
<RPAREN, )>
<SEMICOLON, ;>
<RCURL, }>
<RCURL, }>
<RCURL, }>
<RCURL, }>
<RCURL, }>
<SEMICOLON, ;>
