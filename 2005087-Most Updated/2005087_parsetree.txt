start : program	<Line: 0-0>
 program : program unit	<Line: 0-0>
  program : program unit	<Line: 0-0>
   program : program unit	<Line: 0-0>
    program : program unit	<Line: 0-0>
     program : program unit	<Line: 0-0>
      program : program unit	<Line: 0-0>
       program : program unit	<Line: 0-0>
        program : program unit	<Line: 0-0>
         program : program unit	<Line: 0-0>
          program : program unit	<Line: 0-0>
           program : program unit	<Line: 0-0>
            program : program unit	<Line: 0-0>
             program : unit	<Line: 0-0>
              unit : var_declaration	<Line: 0-0>
               var_declaration : type_specifier declaration_list SEMICOLON	<Line: 0-0>
                type_specifier : INT	<Line: 0-1>
                 INT : int	<Line: 1-1>
                declaration_list : declaration_list COMMA ID	<Line: 0-0>
                 declaration_list : declaration_list COMMA ID	<Line: 0-1>
                  declaration_list : ID	<Line: 0-1>
                   ID : x	<Line: 1-1>
                  COMMA : ,	<Line: 1-1>
                  ID : y	<Line: 1-1>
                 COMMA : ,	<Line: 1-1>
                 ID : z	<Line: 1-1>
                SEMICOLON : ;	<Line: 1-1>
             unit : var_declaration	<Line: 0-0>
              var_declaration : type_specifier declaration_list SEMICOLON	<Line: 0-0>
               type_specifier : FLOAT	<Line: 0-1>
                FLOAT : float	<Line: 1-1>
               declaration_list : ID	<Line: 0-0>
                ID : a	<Line: 1-1>
               SEMICOLON : ;	<Line: 1-1>
            unit : func_declaration	<Line: 0-0>
             func_declaration : type_specifier ID LPAREN parameter_list RPAREN SEMICOLON	<Line: 0-0>
              type_specifier : INT	<Line: 0-3>
               INT : int	<Line: 3-3>
              ID : var	<Line: 3-3>
              LPAREN : (	<Line: 3-3>
              parameter_list : parameter_list COMMA type_specifier ID	<Line: 0-0>
               parameter_list : type_specifier ID	<Line: 0-3>
                type_specifier : INT	<Line: 0-3>
                 INT : int	<Line: 3-3>
                ID : a	<Line: 3-3>
               COMMA : ,	<Line: 3-3>
               type_specifier : INT	<Line: 0-0>
                INT : int	<Line: 3-3>
               ID : b	<Line: 3-3>
              RPAREN : )	<Line: 3-3>
              SEMICOLON : ;	<Line: 3-3>
           unit : func_declaration	<Line: 0-0>
            func_declaration : type_specifier ID LPAREN parameter_list RPAREN SEMICOLON	<Line: 0-0>
             type_specifier : INT	<Line: 0-5>
              INT : int	<Line: 5-5>
             ID : foo3	<Line: 5-5>
             LPAREN : (	<Line: 5-5>
             parameter_list : parameter_list COMMA type_specifier ID	<Line: 0-0>
              parameter_list : type_specifier ID	<Line: 0-5>
               type_specifier : INT	<Line: 0-5>
                INT : int	<Line: 5-5>
               ID : a	<Line: 5-5>
              COMMA : ,	<Line: 5-5>
              type_specifier : INT	<Line: 0-0>
               INT : int	<Line: 5-5>
              ID : b	<Line: 5-5>
             RPAREN : )	<Line: 5-5>
             SEMICOLON : ;	<Line: 5-5>
          unit : func_definition	<Line: 0-0>
           func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement	<Line: 0-0>
            type_specifier : INT	<Line: 0-0>
             INT : int	<Line: 7-7>
            ID : func	<Line: 7-7>
            LPAREN : (	<Line: 7-7>
            parameter_list : parameter_list COMMA type_specifier ID	<Line: 0-0>
             parameter_list : type_specifier ID	<Line: 0-7>
              type_specifier : INT	<Line: 0-7>
               INT : int	<Line: 7-7>
              ID : c	<Line: 7-7>
             COMMA : ,	<Line: 7-7>
             type_specifier : INT	<Line: 0-0>
              INT : int	<Line: 7-7>
             ID : d	<Line: 7-7>
            RPAREN : )	<Line: 7-7>
            compound_statement : LCURL statements RCURL	<Line: 0-0>
             LCURL : {	<Line: 7-9>
             statements : statement	<Line: 0-0>
              statement : RETURN expression SEMICOLON	<Line: 0-0>
               RETURN : return	<Line: 8-8>
               expression : logic_expression	<Line: 0-0>
                logic_expression : rel_expression	<Line: 0-0>
                 rel_expression : simple_expression	<Line: 0-0>
                  simple_expression : term	<Line: 0-0>
                   term : unary_expression	<Line: 0-0>
                    unary_expression : factor	<Line: 0-0>
                     factor : CONST_INT	<Line: 0-0>
                      int	<Line: 8-8>
               SEMICOLON : ;	<Line: 8-8>
             RCURL : }	<Line: 9-9>
         unit : func_definition	<Line: 0-0>
          func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement	<Line: 0-0>
           type_specifier : INT	<Line: 0-0>
            INT : int	<Line: 11-11>
           ID : correct_foo	<Line: 11-11>
           LPAREN : (	<Line: 11-11>
           parameter_list : parameter_list COMMA type_specifier ID	<Line: 0-0>
            parameter_list : type_specifier ID	<Line: 0-11>
             type_specifier : INT	<Line: 0-11>
              INT : int	<Line: 11-11>
             ID : a	<Line: 11-11>
            COMMA : ,	<Line: 11-11>
            type_specifier : FLOAT	<Line: 0-0>
             FLOAT : float	<Line: 11-11>
            ID : b	<Line: 11-11>
           RPAREN : )	<Line: 11-11>
           compound_statement : LCURL statements RCURL	<Line: 0-0>
            LCURL : {	<Line: 11-13>
            statements : statement	<Line: 0-0>
             statement : RETURN expression SEMICOLON	<Line: 0-0>
              RETURN : return	<Line: 12-12>
              expression : logic_expression	<Line: 0-0>
               logic_expression : rel_expression	<Line: 0-0>
                rel_expression : simple_expression	<Line: 0-0>
                 simple_expression : simple_expression ADDOP term	<Line: 0-0>
                  simple_expression : term	<Line: 0-0>
                   term : unary_expression	<Line: 0-0>
                    unary_expression : factor	<Line: 0-0>
                     factor : variable	<Line: 0-0>
                      variable : ID	<Line: 0-0>
                       ID : a	<Line: 12-12>
                  ADDOP : +	<Line: 12-12>
                  term : unary_expression	<Line: 0-0>
                   unary_expression : factor	<Line: 0-0>
                    factor : CONST_INT	<Line: 0-0>
                     int	<Line: 12-12>
              SEMICOLON : ;	<Line: 12-12>
            RCURL : }	<Line: 13-13>
        unit : func_definition	<Line: 0-0>
         func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement	<Line: 0-0>
          type_specifier : VOID	<Line: 0-0>
           VOID : void	<Line: 16-16>
          ID : foo	<Line: 16-16>
          LPAREN : (	<Line: 16-16>
          parameter_list : type_specifier ID	<Line: 0-0>
           type_specifier : INT	<Line: 0-16>
            INT : int	<Line: 16-16>
           ID : a	<Line: 16-16>
          RPAREN : )	<Line: 16-16>
          compound_statement : LCURL statements RCURL	<Line: 0-0>
           LCURL : {	<Line: 16-18>
           statements : statement	<Line: 0-0>
            statement : expression_statement	<Line: 0-0>
             expression_statement : expression SEMICOLON	<Line: 0-0>
              expression : variable ASSIGNOP logic_expression	<Line: 0-17>
               variable : ID	<Line: 0-0>
                ID : y	<Line: 17-17>
               ASSIGNOP : =	<Line: 17-17>
               logic_expression : rel_expression	<Line: 0-0>
                rel_expression : simple_expression	<Line: 0-0>
                 simple_expression : term	<Line: 0-0>
                  term : unary_expression	<Line: 0-0>
                   unary_expression : factor	<Line: 0-0>
                    factor : CONST_INT	<Line: 0-0>
                     int	<Line: 17-17>
              SEMICOLON : ;	<Line: 17-17>
           RCURL : }	<Line: 18-18>
       unit : func_definition	<Line: 0-0>
        func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement	<Line: 0-0>
         type_specifier : INT	<Line: 0-0>
          INT : int	<Line: 20-20>
         ID : foo2	<Line: 20-20>
         LPAREN : (	<Line: 20-20>
         parameter_list : parameter_list COMMA type_specifier ID	<Line: 0-0>
          parameter_list : parameter_list COMMA type_specifier ID	<Line: 0-20>
           parameter_list : type_specifier ID	<Line: 0-20>
            type_specifier : INT	<Line: 0-20>
             INT : int	<Line: 20-20>
            ID : a	<Line: 20-20>
           COMMA : ,	<Line: 20-20>
           type_specifier : INT	<Line: 0-0>
            INT : int	<Line: 20-20>
           ID : a	<Line: 20-20>
          COMMA : ,	<Line: 20-20>
          type_specifier : FLOAT	<Line: 0-0>
           FLOAT : float	<Line: 20-20>
          ID : b	<Line: 20-20>
         RPAREN : )	<Line: 20-20>
         compound_statement : LCURL statements RCURL	<Line: 0-0>
          LCURL : {	<Line: 20-22>
          statements : statement	<Line: 0-0>
           statement : RETURN expression SEMICOLON	<Line: 0-0>
            RETURN : return	<Line: 21-21>
            expression : logic_expression	<Line: 0-0>
             logic_expression : rel_expression	<Line: 0-0>
              rel_expression : simple_expression	<Line: 0-0>
               simple_expression : simple_expression ADDOP term	<Line: 0-0>
                simple_expression : term	<Line: 0-0>
                 term : unary_expression	<Line: 0-0>
                  unary_expression : factor	<Line: 0-0>
                   factor : variable	<Line: 0-0>
                    variable : ID	<Line: 0-0>
                     ID : a	<Line: 21-21>
                ADDOP : +	<Line: 21-21>
                term : unary_expression	<Line: 0-0>
                 unary_expression : factor	<Line: 0-0>
                  factor : CONST_INT	<Line: 0-0>
                   int	<Line: 21-21>
            SEMICOLON : ;	<Line: 21-21>
          RCURL : }	<Line: 22-22>
      unit : func_definition	<Line: 0-0>
       func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement	<Line: 0-0>
        type_specifier : VOID	<Line: 0-0>
         VOID : void	<Line: 24-24>
        ID : foo3	<Line: 24-24>
        LPAREN : (	<Line: 24-24>
        parameter_list : parameter_list COMMA type_specifier ID	<Line: 0-0>
         parameter_list : type_specifier ID	<Line: 0-24>
          type_specifier : INT	<Line: 0-24>
           INT : int	<Line: 24-24>
          ID : a	<Line: 24-24>
         COMMA : ,	<Line: 24-24>
         type_specifier : INT	<Line: 0-0>
          INT : int	<Line: 24-24>
         ID : b	<Line: 24-24>
        RPAREN : )	<Line: 24-24>
        compound_statement : LCURL statements RCURL	<Line: 0-0>
         LCURL : {	<Line: 24-26>
         statements : statement	<Line: 0-0>
          statement : expression_statement	<Line: 0-0>
           expression_statement : expression SEMICOLON	<Line: 0-0>
            expression : variable ASSIGNOP logic_expression	<Line: 0-25>
             variable : ID	<Line: 0-0>
              ID : y	<Line: 25-25>
             ASSIGNOP : =	<Line: 25-25>
             logic_expression : rel_expression	<Line: 0-0>
              rel_expression : simple_expression	<Line: 0-0>
               simple_expression : term	<Line: 0-0>
                term : unary_expression	<Line: 0-0>
                 unary_expression : factor	<Line: 0-0>
                  factor : CONST_INT	<Line: 0-0>
                   int	<Line: 25-25>
            SEMICOLON : ;	<Line: 25-25>
         RCURL : }	<Line: 26-26>
     unit : func_definition	<Line: 0-0>
      func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement	<Line: 0-0>
       type_specifier : INT	<Line: 0-0>
        INT : int	<Line: 28-28>
       ID : z	<Line: 28-28>
       LPAREN : (	<Line: 28-28>
       parameter_list : type_specifier ID	<Line: 0-0>
        type_specifier : INT	<Line: 0-28>
         INT : int	<Line: 28-28>
        ID : d	<Line: 28-28>
       RPAREN : )	<Line: 28-28>
       compound_statement : LCURL statements RCURL	<Line: 0-0>
        LCURL : {	<Line: 28-30>
        statements : statement	<Line: 0-0>
         statement : RETURN expression SEMICOLON	<Line: 0-0>
          RETURN : return	<Line: 29-29>
          expression : logic_expression	<Line: 0-0>
           logic_expression : rel_expression	<Line: 0-0>
            rel_expression : simple_expression	<Line: 0-0>
             simple_expression : term	<Line: 0-0>
              term : unary_expression	<Line: 0-0>
               unary_expression : factor	<Line: 0-0>
                factor : variable	<Line: 0-0>
                 variable : ID	<Line: 0-0>
                  ID : d	<Line: 29-29>
          SEMICOLON : ;	<Line: 29-29>
        RCURL : }	<Line: 30-30>
    unit : func_definition	<Line: 0-0>
     func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement	<Line: 0-0>
      type_specifier : INT	<Line: 0-0>
       INT : int	<Line: 32-32>
      ID : var	<Line: 32-32>
      LPAREN : (	<Line: 32-32>
      parameter_list : type_specifier ID	<Line: 0-0>
       type_specifier : INT	<Line: 0-32>
        INT : int	<Line: 32-32>
       ID : a	<Line: 32-32>
      RPAREN : )	<Line: 32-32>
      compound_statement : LCURL statements RCURL	<Line: 0-0>
       LCURL : {	<Line: 32-34>
       statements : statement	<Line: 0-0>
        statement : RETURN expression SEMICOLON	<Line: 0-0>
         RETURN : return	<Line: 33-33>
         expression : logic_expression	<Line: 0-0>
          logic_expression : rel_expression	<Line: 0-0>
           rel_expression : simple_expression	<Line: 0-0>
            simple_expression : term	<Line: 0-0>
             term : unary_expression	<Line: 0-0>
              unary_expression : factor	<Line: 0-0>
               factor : variable	<Line: 0-0>
                variable : ID	<Line: 0-0>
                 ID : a	<Line: 33-33>
         SEMICOLON : ;	<Line: 33-33>
       RCURL : }	<Line: 34-34>
   unit : func_definition	<Line: 0-0>
    func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement	<Line: 0-0>
     type_specifier : VOID	<Line: 0-0>
      VOID : void	<Line: 36-36>
     ID : foo4	<Line: 36-36>
     LPAREN : (	<Line: 36-36>
     parameter_list : type_specifier ID	<Line: 0-0>
      type_specifier : INT	<Line: 0-36>
       INT : int	<Line: 36-36>
      ID : a	<Line: 36-36>
     RPAREN : )	<Line: 36-36>
     compound_statement : LCURL statements RCURL	<Line: 0-0>
      LCURL : {	<Line: 36-38>
      statements : statement	<Line: 0-0>
       statement : RETURN expression SEMICOLON	<Line: 0-0>
        RETURN : return	<Line: 37-37>
        expression : logic_expression	<Line: 0-0>
         logic_expression : rel_expression	<Line: 0-0>
          rel_expression : simple_expression	<Line: 0-0>
           simple_expression : simple_expression ADDOP term	<Line: 0-0>
            simple_expression : term	<Line: 0-0>
             term : unary_expression	<Line: 0-0>
              unary_expression : factor	<Line: 0-0>
               factor : variable	<Line: 0-0>
                variable : ID	<Line: 0-0>
                 ID : a	<Line: 37-37>
            ADDOP : +	<Line: 37-37>
            term : unary_expression	<Line: 0-0>
             unary_expression : factor	<Line: 0-0>
              factor : CONST_INT	<Line: 0-0>
               int	<Line: 37-37>
        SEMICOLON : ;	<Line: 37-37>
      RCURL : }	<Line: 38-38>
  unit : func_definition	<Line: 0-0>
   func_definition : type_specifier ID LPAREN RPAREN compound_statement	<Line: 0-0>
    type_specifier : INT	<Line: 0-0>
     INT : int	<Line: 40-40>
    ID : main	<Line: 40-40>
    LPAREN : (	<Line: 40-40>
    RPAREN : )	<Line: 40-40>
    compound_statement : LCURL statements RCURL	<Line: 0-0>
     LCURL : {	<Line: 40-72>
     statements : statements statement	<Line: 0-0>
      statements : statements statement	<Line: 0-0>
       statements : statements statement	<Line: 0-0>
        statements : statements statement	<Line: 0-0>
         statements : statements statement	<Line: 0-0>
          statements : statements statement	<Line: 0-0>
           statements : statements statement	<Line: 0-0>
            statements : statements statement	<Line: 0-0>
             statements : statements statement	<Line: 0-0>
              statements : statements statement	<Line: 0-0>
               statements : statements statement	<Line: 0-0>
                statements : statements statement	<Line: 0-0>
                 statements : statements statement	<Line: 0-0>
                  statements : statements statement	<Line: 0-0>
                   statements : statements statement	<Line: 0-0>
                    statements : statements statement	<Line: 0-0>
                     statements : statements statement	<Line: 0-0>
                      statements : statements statement	<Line: 0-0>
                       statements : statements statement	<Line: 0-0>
                        statements : statement	<Line: 0-0>
                         statement : var_declaration	<Line: 0-0>
                          var_declaration : type_specifier declaration_list SEMICOLON	<Line: 0-0>
                           type_specifier : INT	<Line: 0-41>
                            INT : int	<Line: 41-41>
                           declaration_list : declaration_list COMMA ID	<Line: 0-0>
                            declaration_list : declaration_list COMMA ID	<Line: 0-41>
                             declaration_list : declaration_list COMMA ID LSQUARE CONST_INT RSQUARE	<Line: 0-41>
                              declaration_list : declaration_list COMMA ID	<Line: 0-41>
                               declaration_list : ID	<Line: 0-41>
                                ID : a	<Line: 41-41>
                               COMMA : ,	<Line: 41-41>
                               ID : b	<Line: 41-41>
                              COMMA : ,	<Line: 41-41>
                              ID : c	<Line: 41-41>
                              LSQUARE : [	<Line: 41-41>
                              int	<Line: 41-41>
                              RSQUARE : ]	<Line: 41-41>
                             COMMA : ,	<Line: 41-41>
                             ID : dd	<Line: 41-41>
                            COMMA : ,	<Line: 41-41>
                            ID : ee	<Line: 41-41>
                           SEMICOLON : ;	<Line: 41-41>
                        statement : var_declaration	<Line: 0-0>
                         var_declaration : type_specifier declaration_list SEMICOLON	<Line: 0-0>
                          type_specifier : VOID	<Line: 0-42>
                           VOID : void	<Line: 42-42>
                          declaration_list : ID	<Line: 0-0>
                           ID : e	<Line: 42-42>
                          SEMICOLON : ;	<Line: 42-42>
                       statement : var_declaration	<Line: 0-0>
                        var_declaration : type_specifier declaration_list SEMICOLON	<Line: 0-0>
                         type_specifier : FLOAT	<Line: 0-43>
                          FLOAT : float	<Line: 43-43>
                         declaration_list : declaration_list COMMA ID LSQUARE CONST_INT RSQUARE	<Line: 0-0>
                          declaration_list : ID	<Line: 0-43>
                           ID : a	<Line: 43-43>
                          COMMA : ,	<Line: 43-43>
                          ID : c	<Line: 43-43>
                          LSQUARE : [	<Line: 43-43>
                          int	<Line: 43-43>
                          RSQUARE : ]	<Line: 43-43>
                         SEMICOLON : ;	<Line: 43-43>
                      statement : expression_statement	<Line: 0-0>
                       expression_statement : expression SEMICOLON	<Line: 0-0>
                        expression : logic_expression	<Line: 0-45>
                         logic_expression : rel_expression	<Line: 0-0>
                          rel_expression : simple_expression	<Line: 0-0>
                           simple_expression : term	<Line: 0-0>
                            term : unary_expression	<Line: 0-0>
                             unary_expression : factor	<Line: 0-0>
                              factor : ID LPAREN argument_list RPAREN	<Line: 0-0>
                               ID : func	<Line: 45-45>
                               LPAREN : (	<Line: 45-45>
                               argument_list : arguments	<Line: 0-0>
                                arguments : arguments COMMA logic_expression	<Line: 0-0>
                                 arguments : logic_expression	<Line: 0-0>
                                  logic_expression : rel_expression	<Line: 0-0>
                                   rel_expression : simple_expression	<Line: 0-0>
                                    simple_expression : term	<Line: 0-0>
                                     term : unary_expression	<Line: 0-0>
                                      unary_expression : factor	<Line: 0-0>
                                       factor : CONST_FLOAT	<Line: 0-0>
                                        float	<Line: 45-45>
                                 COMMA : ,	<Line: 45-45>
                                 logic_expression : rel_expression	<Line: 0-0>
                                  rel_expression : simple_expression	<Line: 0-0>
                                   simple_expression : term	<Line: 0-0>
                                    term : unary_expression	<Line: 0-0>
                                     unary_expression : factor	<Line: 0-0>
                                      factor : CONST_FLOAT	<Line: 0-0>
                                       float	<Line: 45-45>
                               RPAREN : )	<Line: 45-45>
                        SEMICOLON : ;	<Line: 45-45>
                     statement : expression_statement	<Line: 0-0>
                      expression_statement : expression SEMICOLON	<Line: 0-0>
                       expression : variable ASSIGNOP logic_expression	<Line: 0-48>
                        variable : ID	<Line: 0-0>
                         ID : a	<Line: 48-48>
                        ASSIGNOP : =	<Line: 48-48>
                        logic_expression : rel_expression	<Line: 0-0>
                         rel_expression : simple_expression	<Line: 0-0>
                          simple_expression : term	<Line: 0-0>
                           term : unary_expression	<Line: 0-0>
                            unary_expression : factor	<Line: 0-0>
                             factor : ID LPAREN argument_list RPAREN	<Line: 0-0>
                              ID : correct_foo	<Line: 48-48>
                              LPAREN : (	<Line: 48-48>
                              argument_list : arguments	<Line: 0-0>
                               arguments : arguments COMMA logic_expression	<Line: 0-0>
                                arguments : logic_expression	<Line: 0-0>
                                 logic_expression : rel_expression	<Line: 0-0>
                                  rel_expression : simple_expression	<Line: 0-0>
                                   simple_expression : term	<Line: 0-0>
                                    term : unary_expression	<Line: 0-0>
                                     unary_expression : factor	<Line: 0-0>
                                      factor : variable	<Line: 0-0>
                                       variable : ID	<Line: 0-0>
                                        ID : a	<Line: 48-48>
                                COMMA : ,	<Line: 48-48>
                                logic_expression : rel_expression	<Line: 0-0>
                                 rel_expression : simple_expression	<Line: 0-0>
                                  simple_expression : term	<Line: 0-0>
                                   term : unary_expression	<Line: 0-0>
                                    unary_expression : factor	<Line: 0-0>
                                     factor : variable	<Line: 0-0>
                                      variable : ID	<Line: 0-0>
                                       ARRAY : c	<Line: 48-48>
                              RPAREN : )	<Line: 48-48>
                       SEMICOLON : ;	<Line: 48-48>
                    statement : expression_statement	<Line: 0-0>
                     expression_statement : expression SEMICOLON	<Line: 0-0>
                      expression : variable ASSIGNOP logic_expression	<Line: 0-49>
                       variable : ID	<Line: 0-0>
                        ID : b	<Line: 49-49>
                       ASSIGNOP : =	<Line: 49-49>
                       logic_expression : rel_expression	<Line: 0-0>
                        rel_expression : simple_expression	<Line: 0-0>
                         simple_expression : term	<Line: 0-0>
                          term : unary_expression	<Line: 0-0>
                           unary_expression : factor	<Line: 0-0>
                            factor : ID LPAREN argument_list RPAREN	<Line: 0-0>
                             ID : correct_foo	<Line: 49-49>
                             LPAREN : (	<Line: 49-49>
                             argument_list : arguments	<Line: 0-0>
                              arguments : logic_expression	<Line: 0-0>
                               logic_expression : rel_expression	<Line: 0-0>
                                rel_expression : simple_expression	<Line: 0-0>
                                 simple_expression : term	<Line: 0-0>
                                  term : unary_expression	<Line: 0-0>
                                   unary_expression : factor	<Line: 0-0>
                                    factor : variable	<Line: 0-0>
                                     variable : ID	<Line: 0-0>
                                      ID : a	<Line: 49-49>
                             RPAREN : )	<Line: 49-49>
                      SEMICOLON : ;	<Line: 49-49>
                   statement : expression_statement	<Line: 0-0>
                    expression_statement : expression SEMICOLON	<Line: 0-0>
                     expression : variable ASSIGNOP logic_expression	<Line: 0-50>
                      variable : ID	<Line: 0-0>
                       ID : dd	<Line: 50-50>
                      ASSIGNOP : =	<Line: 50-50>
                      logic_expression : rel_expression	<Line: 0-0>
                       rel_expression : simple_expression	<Line: 0-0>
                        simple_expression : term	<Line: 0-0>
                         term : unary_expression	<Line: 0-0>
                          unary_expression : factor	<Line: 0-0>
                           factor : ID LPAREN argument_list RPAREN	<Line: 0-0>
                            ID : correct_foo	<Line: 50-50>
                            LPAREN : (	<Line: 50-50>
                            argument_list : arguments	<Line: 0-0>
                             arguments : arguments COMMA logic_expression	<Line: 0-0>
                              arguments : arguments COMMA logic_expression	<Line: 0-0>
                               arguments : logic_expression	<Line: 0-0>
                                logic_expression : rel_expression	<Line: 0-0>
                                 rel_expression : simple_expression	<Line: 0-0>
                                  simple_expression : term	<Line: 0-0>
                                   term : unary_expression	<Line: 0-0>
                                    unary_expression : factor	<Line: 0-0>
                                     factor : variable	<Line: 0-0>
                                      variable : ID	<Line: 0-0>
                                       ID : a	<Line: 50-50>
                               COMMA : ,	<Line: 50-50>
                               logic_expression : rel_expression	<Line: 0-0>
                                rel_expression : simple_expression	<Line: 0-0>
                                 simple_expression : term	<Line: 0-0>
                                  term : unary_expression	<Line: 0-0>
                                   unary_expression : factor	<Line: 0-0>
                                    factor : variable	<Line: 0-0>
                                     variable : ID	<Line: 0-0>
                                      ID : b	<Line: 50-50>
                              COMMA : ,	<Line: 50-50>
                              logic_expression : rel_expression	<Line: 0-0>
                               rel_expression : simple_expression	<Line: 0-0>
                                simple_expression : term	<Line: 0-0>
                                 term : unary_expression	<Line: 0-0>
                                  unary_expression : factor	<Line: 0-0>
                                   factor : variable	<Line: 0-0>
                                    variable : ID	<Line: 0-0>
                                     ID : a	<Line: 50-50>
                            RPAREN : )	<Line: 50-50>
                     SEMICOLON : ;	<Line: 50-50>
                  statement : expression_statement	<Line: 0-0>
                   expression_statement : expression SEMICOLON	<Line: 0-0>
                    expression : variable ASSIGNOP logic_expression	<Line: 0-52>
                     variable : ID	<Line: 0-0>
                      ID : k	<Line: 52-52>
                     ASSIGNOP : =	<Line: 52-52>
                     logic_expression : rel_expression	<Line: 0-0>
                      rel_expression : simple_expression	<Line: 0-0>
                       simple_expression : simple_expression ADDOP term	<Line: 0-0>
                        simple_expression : term	<Line: 0-0>
                         term : unary_expression	<Line: 0-0>
                          unary_expression : factor	<Line: 0-0>
                           factor : CONST_INT	<Line: 0-0>
                            int	<Line: 52-52>
                        ADDOP : +	<Line: 52-52>
                        term : unary_expression	<Line: 0-0>
                         unary_expression : factor	<Line: 0-0>
                          factor : CONST_INT	<Line: 0-0>
                           int	<Line: 52-52>
                    SEMICOLON : ;	<Line: 52-52>
                 statement : expression_statement	<Line: 0-0>
                  expression_statement : expression SEMICOLON	<Line: 0-0>
                   expression : variable ASSIGNOP logic_expression	<Line: 0-53>
                    variable : ID LSQUARE expression RSQUARE	<Line: 0-0>
                     ID : b	<Line: 53-53>
                     LSQUARE : [	<Line: 53-53>
                     expression : logic_expression	<Line: 0-0>
                      logic_expression : rel_expression	<Line: 0-0>
                       rel_expression : simple_expression	<Line: 0-0>
                        simple_expression : term	<Line: 0-0>
                         term : unary_expression	<Line: 0-0>
                          unary_expression : factor	<Line: 0-0>
                           factor : CONST_INT	<Line: 0-0>
                            int	<Line: 53-53>
                     RSQUARE : ]	<Line: 53-53>
                    ASSIGNOP : =	<Line: 53-53>
                    logic_expression : rel_expression	<Line: 0-0>
                     rel_expression : simple_expression	<Line: 0-0>
                      simple_expression : term	<Line: 0-0>
                       term : unary_expression	<Line: 0-0>
                        unary_expression : factor	<Line: 0-0>
                         factor : CONST_INT	<Line: 0-0>
                          int	<Line: 53-53>
                   SEMICOLON : ;	<Line: 53-53>
                statement : expression_statement	<Line: 0-0>
                 expression_statement : expression SEMICOLON	<Line: 0-0>
                  expression : variable ASSIGNOP logic_expression	<Line: 0-54>
                   variable : ID LSQUARE expression RSQUARE	<Line: 0-0>
                    ID : c	<Line: 54-54>
                    LSQUARE : [	<Line: 54-54>
                    expression : logic_expression	<Line: 0-0>
                     logic_expression : rel_expression	<Line: 0-0>
                      rel_expression : simple_expression	<Line: 0-0>
                       simple_expression : term	<Line: 0-0>
                        term : unary_expression	<Line: 0-0>
                         unary_expression : factor	<Line: 0-0>
                          factor : CONST_FLOAT	<Line: 0-0>
                           float	<Line: 54-54>
                    RSQUARE : ]	<Line: 54-54>
                   ASSIGNOP : =	<Line: 54-54>
                   logic_expression : rel_expression	<Line: 0-0>
                    rel_expression : simple_expression	<Line: 0-0>
                     simple_expression : term	<Line: 0-0>
                      term : unary_expression	<Line: 0-0>
                       unary_expression : factor	<Line: 0-0>
                        factor : CONST_INT	<Line: 0-0>
                         int	<Line: 54-54>
                  SEMICOLON : ;	<Line: 54-54>
               statement : expression_statement	<Line: 0-0>
                expression_statement : expression SEMICOLON	<Line: 0-0>
                 expression : variable ASSIGNOP logic_expression	<Line: 0-55>
                  variable : ID LSQUARE expression RSQUARE	<Line: 0-0>
                   ID : c	<Line: 55-55>
                   LSQUARE : [	<Line: 55-55>
                   expression : logic_expression	<Line: 0-0>
                    logic_expression : rel_expression	<Line: 0-0>
                     rel_expression : simple_expression	<Line: 0-0>
                      simple_expression : term	<Line: 0-0>
                       term : unary_expression	<Line: 0-0>
                        unary_expression : factor	<Line: 0-0>
                         factor : CONST_INT	<Line: 0-0>
                          int	<Line: 55-55>
                   RSQUARE : ]	<Line: 55-55>
                  ASSIGNOP : =	<Line: 55-55>
                  logic_expression : rel_expression	<Line: 0-0>
                   rel_expression : simple_expression	<Line: 0-0>
                    simple_expression : simple_expression ADDOP term	<Line: 0-0>
                     simple_expression : term	<Line: 0-0>
                      term : unary_expression	<Line: 0-0>
                       unary_expression : factor	<Line: 0-0>
                        factor : CONST_INT	<Line: 0-0>
                         int	<Line: 55-55>
                     ADDOP : +	<Line: 55-55>
                     term : term MULOP unary_expression	<Line: 0-0>
                      term : unary_expression	<Line: 0-0>
                       unary_expression : factor	<Line: 0-0>
                        factor : CONST_INT	<Line: 0-0>
                         int	<Line: 55-55>
                      MULOP : *	<Line: 55-55>
                      unary_expression : factor	<Line: 0-0>
                       factor : ID LPAREN argument_list RPAREN	<Line: 0-0>
                        ID : foo4	<Line: 55-55>
                        LPAREN : (	<Line: 55-55>
                        argument_list : arguments	<Line: 0-0>
                         arguments : logic_expression	<Line: 0-0>
                          logic_expression : rel_expression	<Line: 0-0>
                           rel_expression : simple_expression	<Line: 0-0>
                            simple_expression : term	<Line: 0-0>
                             term : unary_expression	<Line: 0-0>
                              unary_expression : factor	<Line: 0-0>
                               factor : CONST_INT	<Line: 0-0>
                                int	<Line: 55-55>
                        RPAREN : )	<Line: 55-55>
                 SEMICOLON : ;	<Line: 55-55>
              statement : expression_statement	<Line: 0-0>
               expression_statement : expression SEMICOLON	<Line: 0-0>
                expression : variable ASSIGNOP logic_expression	<Line: 0-56>
                 variable : ID LSQUARE expression RSQUARE	<Line: 0-0>
                  ID : c	<Line: 56-56>
                  LSQUARE : [	<Line: 56-56>
                  expression : logic_expression	<Line: 0-0>
                   logic_expression : rel_expression	<Line: 0-0>
                    rel_expression : simple_expression	<Line: 0-0>
                     simple_expression : term	<Line: 0-0>
                      term : unary_expression	<Line: 0-0>
                       unary_expression : factor	<Line: 0-0>
                        factor : CONST_INT	<Line: 0-0>
                         int	<Line: 56-56>
                  RSQUARE : ]	<Line: 56-56>
                 ASSIGNOP : =	<Line: 56-56>
                 logic_expression : rel_expression	<Line: 0-0>
                  rel_expression : simple_expression	<Line: 0-0>
                   simple_expression : term	<Line: 0-0>
                    term : unary_expression	<Line: 0-0>
                     unary_expression : factor	<Line: 0-0>
                      factor : CONST_INT	<Line: 0-0>
                       int	<Line: 56-56>
                SEMICOLON : ;	<Line: 56-56>
             statement : expression_statement	<Line: 0-0>
              expression_statement : expression SEMICOLON	<Line: 0-0>
               expression : logic_expression	<Line: 0-57>
                logic_expression : rel_expression	<Line: 0-0>
                 rel_expression : simple_expression	<Line: 0-0>
                  simple_expression : term	<Line: 0-0>
                   term : unary_expression	<Line: 0-0>
                    unary_expression : factor	<Line: 0-0>
                     factor : ID LPAREN argument_list RPAREN	<Line: 0-0>
                      ID : foo4	<Line: 57-57>
                      LPAREN : (	<Line: 57-57>
                      argument_list : arguments	<Line: 0-0>
                       arguments : logic_expression	<Line: 0-0>
                        logic_expression : rel_expression	<Line: 0-0>
                         rel_expression : simple_expression	<Line: 0-0>
                          simple_expression : term	<Line: 0-0>
                           term : unary_expression	<Line: 0-0>
                            unary_expression : factor	<Line: 0-0>
                             factor : variable	<Line: 0-0>
                              variable : ID LSQUARE expression RSQUARE	<Line: 0-0>
                               ID : c	<Line: 57-57>
                               LSQUARE : [	<Line: 57-57>
                               expression : logic_expression	<Line: 0-0>
                                logic_expression : rel_expression	<Line: 0-0>
                                 rel_expression : simple_expression	<Line: 0-0>
                                  simple_expression : term	<Line: 0-0>
                                   term : unary_expression	<Line: 0-0>
                                    unary_expression : factor	<Line: 0-0>
                                     factor : CONST_INT	<Line: 0-0>
                                      int	<Line: 57-57>
                               RSQUARE : ]	<Line: 57-57>
                      RPAREN : )	<Line: 57-57>
               SEMICOLON : ;	<Line: 57-57>
            statement : expression_statement	<Line: 0-0>
             expression_statement : expression SEMICOLON	<Line: 0-0>
              expression : variable ASSIGNOP logic_expression	<Line: 0-58>
               variable : ID LSQUARE expression RSQUARE	<Line: 0-0>
                ID : c	<Line: 58-58>
                LSQUARE : [	<Line: 58-58>
                expression : logic_expression	<Line: 0-0>
                 logic_expression : rel_expression	<Line: 0-0>
                  rel_expression : simple_expression	<Line: 0-0>
                   simple_expression : term	<Line: 0-0>
                    term : unary_expression	<Line: 0-0>
                     unary_expression : factor	<Line: 0-0>
                      factor : CONST_INT	<Line: 0-0>
                       int	<Line: 58-58>
                RSQUARE : ]	<Line: 58-58>
               ASSIGNOP : =	<Line: 58-58>
               logic_expression : rel_expression	<Line: 0-0>
                rel_expression : simple_expression	<Line: 0-0>
                 simple_expression : term	<Line: 0-0>
                  term : unary_expression	<Line: 0-0>
                   unary_expression : factor	<Line: 0-0>
                    factor : ID LPAREN argument_list RPAREN	<Line: 0-0>
                     ID : foo4	<Line: 58-58>
                     LPAREN : (	<Line: 58-58>
                     argument_list : arguments	<Line: 0-0>
                      arguments : logic_expression	<Line: 0-0>
                       logic_expression : rel_expression	<Line: 0-0>
                        rel_expression : simple_expression	<Line: 0-0>
                         simple_expression : term	<Line: 0-0>
                          term : unary_expression	<Line: 0-0>
                           unary_expression : factor	<Line: 0-0>
                            factor : variable	<Line: 0-0>
                             variable : ID LSQUARE expression RSQUARE	<Line: 0-0>
                              ID : c	<Line: 58-58>
                              LSQUARE : [	<Line: 58-58>
                              expression : logic_expression	<Line: 0-0>
                               logic_expression : rel_expression	<Line: 0-0>
                                rel_expression : simple_expression	<Line: 0-0>
                                 simple_expression : term	<Line: 0-0>
                                  term : unary_expression	<Line: 0-0>
                                   unary_expression : factor	<Line: 0-0>
                                    factor : CONST_INT	<Line: 0-0>
                                     int	<Line: 58-58>
                              RSQUARE : ]	<Line: 58-58>
                     RPAREN : )	<Line: 58-58>
              SEMICOLON : ;	<Line: 58-58>
           statement : expression_statement	<Line: 0-0>
            expression_statement : expression SEMICOLON	<Line: 0-0>
             expression : variable ASSIGNOP logic_expression	<Line: 0-59>
              variable : ID LSQUARE expression RSQUARE	<Line: 0-0>
               ID : c	<Line: 59-59>
               LSQUARE : [	<Line: 59-59>
               expression : logic_expression	<Line: 0-0>
                logic_expression : rel_expression	<Line: 0-0>
                 rel_expression : simple_expression	<Line: 0-0>
                  simple_expression : term	<Line: 0-0>
                   term : unary_expression	<Line: 0-0>
                    unary_expression : factor	<Line: 0-0>
                     factor : CONST_INT	<Line: 0-0>
                      int	<Line: 59-59>
               RSQUARE : ]	<Line: 59-59>
              ASSIGNOP : =	<Line: 59-59>
              logic_expression : rel_expression	<Line: 0-0>
               rel_expression : simple_expression	<Line: 0-0>
                simple_expression : term	<Line: 0-0>
                 term : unary_expression	<Line: 0-0>
                  unary_expression : factor	<Line: 0-0>
                   factor : CONST_FLOAT	<Line: 0-0>
                    float	<Line: 59-59>
             SEMICOLON : ;	<Line: 59-59>
          statement : expression_statement	<Line: 0-0>
           expression_statement : expression SEMICOLON	<Line: 0-0>
            expression : variable ASSIGNOP logic_expression	<Line: 0-60>
             variable : ID	<Line: 0-0>
              ID : b	<Line: 60-60>
             ASSIGNOP : =	<Line: 60-60>
             logic_expression : rel_expression	<Line: 0-0>
              rel_expression : simple_expression	<Line: 0-0>
               simple_expression : term	<Line: 0-0>
                term : term MULOP unary_expression	<Line: 0-0>
                 term : unary_expression	<Line: 0-0>
                  unary_expression : factor	<Line: 0-0>
                   factor : CONST_INT	<Line: 0-0>
                    int	<Line: 60-60>
                 MULOP : %	<Line: 60-60>
                 unary_expression : factor	<Line: 0-0>
                  factor : CONST_INT	<Line: 0-0>
                   int	<Line: 60-60>
            SEMICOLON : ;	<Line: 60-60>
         statement : expression_statement	<Line: 0-0>
          expression_statement : expression SEMICOLON	<Line: 0-0>
           expression : variable ASSIGNOP logic_expression	<Line: 0-61>
            variable : ID	<Line: 0-0>
             ID : b	<Line: 61-61>
            ASSIGNOP : =	<Line: 61-61>
            logic_expression : rel_expression	<Line: 0-0>
             rel_expression : simple_expression	<Line: 0-0>
              simple_expression : term	<Line: 0-0>
               term : term MULOP unary_expression	<Line: 0-0>
                term : unary_expression	<Line: 0-0>
                 unary_expression : factor	<Line: 0-0>
                  factor : CONST_INT	<Line: 0-0>
                   int	<Line: 61-61>
                MULOP : %	<Line: 61-61>
                unary_expression : factor	<Line: 0-0>
                 factor : CONST_FLOAT	<Line: 0-0>
                  float	<Line: 61-61>
           SEMICOLON : ;	<Line: 61-61>
        statement : expression_statement	<Line: 0-0>
         expression_statement : expression SEMICOLON	<Line: 0-0>
          expression : variable ASSIGNOP logic_expression	<Line: 0-63>
           variable : ID	<Line: 0-0>
            ID : dd	<Line: 63-63>
           ASSIGNOP : =	<Line: 63-63>
           logic_expression : rel_expression	<Line: 0-0>
            rel_expression : simple_expression	<Line: 0-0>
             simple_expression : term	<Line: 0-0>
              term : unary_expression	<Line: 0-0>
               unary_expression : factor	<Line: 0-0>
                factor : ID LPAREN argument_list RPAREN	<Line: 0-0>
                 ID : foo5	<Line: 63-63>
                 LPAREN : (	<Line: 63-63>
                 argument_list : arguments	<Line: 0-0>
                  arguments : logic_expression	<Line: 0-0>
                   logic_expression : rel_expression	<Line: 0-0>
                    rel_expression : simple_expression	<Line: 0-0>
                     simple_expression : term	<Line: 0-0>
                      term : unary_expression	<Line: 0-0>
                       unary_expression : factor	<Line: 0-0>
                        factor : variable	<Line: 0-0>
                         variable : ID	<Line: 0-0>
                          ID : a	<Line: 63-63>
                 RPAREN : )	<Line: 63-63>
          SEMICOLON : ;	<Line: 63-63>
       statement : expression_statement	<Line: 0-0>
        expression_statement : expression SEMICOLON	<Line: 0-0>
         expression : logic_expression	<Line: 0-68>
          logic_expression : rel_expression	<Line: 0-0>
           rel_expression : simple_expression	<Line: 0-0>
            simple_expression : term	<Line: 0-0>
             term : unary_expression	<Line: 0-0>
              unary_expression : factor	<Line: 0-0>
               factor : ID LPAREN argument_list RPAREN	<Line: 0-0>
                ID : printf	<Line: 68-68>
                LPAREN : (	<Line: 68-68>
                argument_list : arguments	<Line: 0-0>
                 arguments : logic_expression	<Line: 0-0>
                  logic_expression : rel_expression	<Line: 0-0>
                   rel_expression : simple_expression	<Line: 0-0>
                    simple_expression : term	<Line: 0-0>
                     term : unary_expression	<Line: 0-0>
                      unary_expression : factor	<Line: 0-0>
                       factor : variable	<Line: 0-0>
                        variable : ID	<Line: 0-0>
                         ID : h	<Line: 68-68>
                RPAREN : )	<Line: 68-68>
         SEMICOLON : ;	<Line: 68-68>
      statement : RETURN expression SEMICOLON	<Line: 0-0>
       RETURN : return	<Line: 69-69>
       expression : logic_expression	<Line: 0-0>
        logic_expression : rel_expression	<Line: 0-0>
         rel_expression : simple_expression	<Line: 0-0>
          simple_expression : term	<Line: 0-0>
           term : unary_expression	<Line: 0-0>
            unary_expression : factor	<Line: 0-0>
             factor : CONST_INT	<Line: 0-0>
              int	<Line: 69-69>
       SEMICOLON : ;	<Line: 69-69>
     RCURL : }	<Line: 72-72>
