Line# 1: Token <SINGLE LINE COMMENT> Lexeme // C++ program for the above approach found
Error at line# 2: UNRECOGNIZED_CHAR #
Line# 2: Token <ID> Lexeme include found
	ScopeTable# 1
	1 --> (include,ID)
	2
	3
	4
	5
	6
	7
	8
	9
	10
Line# 2: Token <RELOP> Lexeme < found
Line# 2: Token <ID> Lexeme bits found
	ScopeTable# 1
	1 --> (include,ID)
	2
	3
	4
	5
	6
	7 --> (bits,ID)
	8
	9
	10
Line# 2: Token <MULOP> Lexeme / found
Line# 2: Token <ID> Lexeme stdc found
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5
	6
	7 --> (bits,ID)
	8
	9
	10
Line# 2: Token <INCOP> Lexeme ++ found
Error at line# 2: UNRECOGNIZED_CHAR .
Line# 2: Token <ID> Lexeme h found
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID)
	6
	7 --> (bits,ID)
	8
	9
	10
Line# 2: Token <RELOP> Lexeme > found
Line# 3: Token <ID> Lexeme using found
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID)
	6
	7 --> (bits,ID)
	8
	9 --> (using,ID)
	10
Line# 3: Token <ID> Lexeme namespace found
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID)
	6
	7 --> (bits,ID)
	8
	9 --> (using,ID)
	10 --> (namespace,ID)
Line# 3: Token <ID> Lexeme std found
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID)
	6
	7 --> (bits,ID)
	8
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 3: Token <SEMICOLON> Lexeme ; found
Line# 5: Token <SINGLE LINE COMMENT> Lexeme // Class for each node in the Binomial Heap found
Line# 6: Token <ID> Lexeme class found
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID)
	6
	7 --> (bits,ID)
	8
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 6: Token <ID> Lexeme Node found
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 6: Token <LCURL> Lexeme { found
Line# 7: warning, 1 of tabs needed but got 0 tabs.
Line# 7: Token <ID> Lexeme public found
	ScopeTable# 1.1
	1
	2
	3
	4
	5
	6
	7
	8 --> (public,ID)
	9
	10
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Error at line# 7: UNRECOGNIZED_CHAR :
Line# 8: Token <INT> Lexeme int found
Line# 8: Token <ID> Lexeme value found
	ScopeTable# 1.1
	1
	2
	3
	4
	5
	6 --> (value,ID)
	7
	8 --> (public,ID)
	9
	10
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 8: Token <SEMICOLON> Lexeme ; found
Line# 9: Token <ID> Lexeme Node found
	ScopeTable# 1.1
	1
	2
	3
	4
	5 --> (Node,ID)
	6 --> (value,ID)
	7
	8 --> (public,ID)
	9
	10
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 9: Token <MULOP> Lexeme * found
Line# 9: Token <ID> Lexeme parent found
	ScopeTable# 1.1
	1
	2
	3
	4
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (parent,ID)
	8 --> (public,ID)
	9
	10
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 9: Token <SEMICOLON> Lexeme ; found
Line# 10: Token <ID> Lexeme vector found
	ScopeTable# 1.1
	1
	2
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (parent,ID)
	8 --> (public,ID)
	9
	10
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 10: Token <RELOP> Lexeme < found
Line# 10: Token <ID> Lexeme Node found
	Node already exists in the current ScopeTable
Line# 10: Token <MULOP> Lexeme * found
Line# 10: Token <RELOP> Lexeme > found
Line# 10: Token <ID> Lexeme children found
	ScopeTable# 1.1
	1
	2 --> (children,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (parent,ID)
	8 --> (public,ID)
	9
	10
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 10: Token <SEMICOLON> Lexeme ; found
Line# 11: Token <INT> Lexeme int found
Line# 11: Token <ID> Lexeme degree found
	ScopeTable# 1.1
	1 --> (degree,ID)
	2 --> (children,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (parent,ID)
	8 --> (public,ID)
	9
	10
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 11: Token <SEMICOLON> Lexeme ; found
Line# 12: Token <ID> Lexeme bool found
	ScopeTable# 1.1
	1 --> (degree,ID) --> (bool,ID)
	2 --> (children,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (parent,ID)
	8 --> (public,ID)
	9
	10
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 12: Token <ID> Lexeme marked found
	ScopeTable# 1.1
	1 --> (degree,ID) --> (bool,ID)
	2 --> (children,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (parent,ID)
	8 --> (public,ID)
	9 --> (marked,ID)
	10
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 12: Token <SEMICOLON> Lexeme ; found
Line# 14: Token <ID> Lexeme Node found
	Node already exists in the current ScopeTable
Line# 14: Token <LPAREN> Lexeme ( found
Line# 14: Token <INT> Lexeme int found
Line# 14: Token <ID> Lexeme val found
	ScopeTable# 1.1
	1 --> (degree,ID) --> (bool,ID)
	2 --> (children,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (parent,ID)
	8 --> (public,ID)
	9 --> (marked,ID)
	10 --> (val,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 14: Token <RPAREN> Lexeme ) found
Line# 14: Token <LCURL> Lexeme { found
Line# 15: Token <ID> Lexeme value found
	ScopeTable# 1.1.1
	1
	2
	3
	4
	5
	6 --> (value,ID)
	7
	8
	9
	10
	ScopeTable# 1.1
	1 --> (degree,ID) --> (bool,ID)
	2 --> (children,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (parent,ID)
	8 --> (public,ID)
	9 --> (marked,ID)
	10 --> (val,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 15: Token <ASSIGNOP> Lexeme = found
Line# 15: Token <ID> Lexeme val found
	ScopeTable# 1.1.1
	1
	2
	3
	4
	5
	6 --> (value,ID)
	7
	8
	9
	10 --> (val,ID)
	ScopeTable# 1.1
	1 --> (degree,ID) --> (bool,ID)
	2 --> (children,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (parent,ID)
	8 --> (public,ID)
	9 --> (marked,ID)
	10 --> (val,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 15: Token <SEMICOLON> Lexeme ; found
Line# 16: Token <ID> Lexeme parent found
	ScopeTable# 1.1.1
	1
	2
	3
	4
	5
	6 --> (value,ID)
	7 --> (parent,ID)
	8
	9
	10 --> (val,ID)
	ScopeTable# 1.1
	1 --> (degree,ID) --> (bool,ID)
	2 --> (children,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (parent,ID)
	8 --> (public,ID)
	9 --> (marked,ID)
	10 --> (val,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 16: Token <ASSIGNOP> Lexeme = found
Line# 16: Token <ID> Lexeme nullptr found
	ScopeTable# 1.1.1
	1
	2
	3
	4
	5
	6 --> (value,ID)
	7 --> (parent,ID)
	8 --> (nullptr,ID)
	9
	10 --> (val,ID)
	ScopeTable# 1.1
	1 --> (degree,ID) --> (bool,ID)
	2 --> (children,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (parent,ID)
	8 --> (public,ID)
	9 --> (marked,ID)
	10 --> (val,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 16: Token <SEMICOLON> Lexeme ; found
Line# 17: Token <ID> Lexeme children found
	ScopeTable# 1.1.1
	1
	2 --> (children,ID)
	3
	4
	5
	6 --> (value,ID)
	7 --> (parent,ID)
	8 --> (nullptr,ID)
	9
	10 --> (val,ID)
	ScopeTable# 1.1
	1 --> (degree,ID) --> (bool,ID)
	2 --> (children,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (parent,ID)
	8 --> (public,ID)
	9 --> (marked,ID)
	10 --> (val,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Error at line# 17: UNRECOGNIZED_CHAR .
Line# 17: Token <ID> Lexeme clear found
	ScopeTable# 1.1.1
	1
	2 --> (children,ID)
	3
	4
	5
	6 --> (value,ID) --> (clear,ID)
	7 --> (parent,ID)
	8 --> (nullptr,ID)
	9
	10 --> (val,ID)
	ScopeTable# 1.1
	1 --> (degree,ID) --> (bool,ID)
	2 --> (children,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (parent,ID)
	8 --> (public,ID)
	9 --> (marked,ID)
	10 --> (val,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 17: Token <LPAREN> Lexeme ( found
Line# 17: Token <RPAREN> Lexeme ) found
Line# 17: Token <SEMICOLON> Lexeme ; found
Line# 18: Token <ID> Lexeme degree found
	ScopeTable# 1.1.1
	1 --> (degree,ID)
	2 --> (children,ID)
	3
	4
	5
	6 --> (value,ID) --> (clear,ID)
	7 --> (parent,ID)
	8 --> (nullptr,ID)
	9
	10 --> (val,ID)
	ScopeTable# 1.1
	1 --> (degree,ID) --> (bool,ID)
	2 --> (children,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (parent,ID)
	8 --> (public,ID)
	9 --> (marked,ID)
	10 --> (val,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 18: Token <ASSIGNOP> Lexeme = found
Line# 18: Token <CONST_INT> Lexeme 0 found
Line# 18: Token <SEMICOLON> Lexeme ; found
Line# 19: Token <ID> Lexeme marked found
	ScopeTable# 1.1.1
	1 --> (degree,ID)
	2 --> (children,ID)
	3
	4
	5
	6 --> (value,ID) --> (clear,ID)
	7 --> (parent,ID)
	8 --> (nullptr,ID)
	9 --> (marked,ID)
	10 --> (val,ID)
	ScopeTable# 1.1
	1 --> (degree,ID) --> (bool,ID)
	2 --> (children,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (parent,ID)
	8 --> (public,ID)
	9 --> (marked,ID)
	10 --> (val,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 19: Token <ASSIGNOP> Lexeme = found
Line# 19: Token <ID> Lexeme false found
	ScopeTable# 1.1.1
	1 --> (degree,ID)
	2 --> (children,ID)
	3
	4
	5
	6 --> (value,ID) --> (clear,ID)
	7 --> (parent,ID)
	8 --> (nullptr,ID) --> (false,ID)
	9 --> (marked,ID)
	10 --> (val,ID)
	ScopeTable# 1.1
	1 --> (degree,ID) --> (bool,ID)
	2 --> (children,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (parent,ID)
	8 --> (public,ID)
	9 --> (marked,ID)
	10 --> (val,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 19: Token <SEMICOLON> Lexeme ; found
Line# 20: Token <RCURL> Lexeme } found
Line# 21: Token <RCURL> Lexeme } found
Line# 21: Token <SEMICOLON> Lexeme ; found
Line# 23: Token <SINGLE LINE COMMENT> Lexeme // Class for the Binomial Heap data structure found
Line# 24: Token <ID> Lexeme class found
	class already exists in the current ScopeTable
Line# 24: Token <ID> Lexeme BinomialHeap found
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 24: Token <LCURL> Lexeme { found
Line# 25: warning, 1 of tabs needed but got 0 tabs.
Line# 25: Token <ID> Lexeme public found
	ScopeTable# 1.2
	1
	2
	3
	4
	5
	6
	7
	8 --> (public,ID)
	9
	10
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Error at line# 25: UNRECOGNIZED_CHAR :
Line# 26: Token <ID> Lexeme vector found
	ScopeTable# 1.2
	1
	2
	3
	4 --> (vector,ID)
	5
	6
	7
	8 --> (public,ID)
	9
	10
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 26: Token <RELOP> Lexeme < found
Line# 26: Token <ID> Lexeme Node found
	ScopeTable# 1.2
	1
	2
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6
	7
	8 --> (public,ID)
	9
	10
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 26: Token <MULOP> Lexeme * found
Line# 26: Token <RELOP> Lexeme > found
Line# 26: Token <ID> Lexeme trees found
	ScopeTable# 1.2
	1
	2 --> (trees,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6
	7
	8 --> (public,ID)
	9
	10
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 26: Token <SEMICOLON> Lexeme ; found
Line# 27: Token <ID> Lexeme Node found
	Node already exists in the current ScopeTable
Line# 27: Token <MULOP> Lexeme * found
Line# 27: Token <ID> Lexeme min_node found
	ScopeTable# 1.2
	1
	2 --> (trees,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6
	7
	8 --> (public,ID)
	9
	10 --> (min_node,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 27: Token <SEMICOLON> Lexeme ; found
Line# 28: Token <INT> Lexeme int found
Line# 28: Token <ID> Lexeme count found
	ScopeTable# 1.2
	1
	2 --> (trees,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6
	7
	8 --> (public,ID) --> (count,ID)
	9
	10 --> (min_node,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 28: Token <SEMICOLON> Lexeme ; found
Line# 30: Token <SINGLE LINE COMMENT> Lexeme // Constructor for the Binomial Heap found
Line# 31: Token <ID> Lexeme BinomialHeap found
	ScopeTable# 1.2
	1
	2 --> (trees,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6
	7
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9
	10 --> (min_node,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 31: Token <LPAREN> Lexeme ( found
Line# 31: Token <RPAREN> Lexeme ) found
Line# 31: Token <LCURL> Lexeme { found
Line# 32: Token <ID> Lexeme min_node found
	ScopeTable# 1.2.1
	1
	2
	3
	4
	5
	6
	7
	8
	9
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1
	2 --> (trees,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6
	7
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9
	10 --> (min_node,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 32: Token <ASSIGNOP> Lexeme = found
Line# 32: Token <ID> Lexeme nullptr found
	ScopeTable# 1.2.1
	1
	2
	3
	4
	5
	6
	7
	8 --> (nullptr,ID)
	9
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1
	2 --> (trees,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6
	7
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9
	10 --> (min_node,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 32: Token <SEMICOLON> Lexeme ; found
Line# 33: Token <ID> Lexeme count found
	ScopeTable# 1.2.1
	1
	2
	3
	4
	5
	6
	7
	8 --> (nullptr,ID) --> (count,ID)
	9
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1
	2 --> (trees,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6
	7
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9
	10 --> (min_node,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 33: Token <ASSIGNOP> Lexeme = found
Line# 33: Token <CONST_INT> Lexeme 0 found
Line# 33: Token <SEMICOLON> Lexeme ; found
Line# 34: Token <ID> Lexeme trees found
	ScopeTable# 1.2.1
	1
	2 --> (trees,ID)
	3
	4
	5
	6
	7
	8 --> (nullptr,ID) --> (count,ID)
	9
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1
	2 --> (trees,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6
	7
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9
	10 --> (min_node,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Error at line# 34: UNRECOGNIZED_CHAR .
Line# 34: Token <ID> Lexeme clear found
	ScopeTable# 1.2.1
	1
	2 --> (trees,ID)
	3
	4
	5
	6 --> (clear,ID)
	7
	8 --> (nullptr,ID) --> (count,ID)
	9
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1
	2 --> (trees,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6
	7
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9
	10 --> (min_node,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 34: Token <LPAREN> Lexeme ( found
Line# 34: Token <RPAREN> Lexeme ) found
Line# 34: Token <SEMICOLON> Lexeme ; found
Line# 35: Token <RCURL> Lexeme } found
Line# 37: Token <SINGLE LINE COMMENT> Lexeme // Check if the heap is empty found
Line# 38: Token <ID> Lexeme bool found
	ScopeTable# 1.2
	1 --> (bool,ID)
	2 --> (trees,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6
	7
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9
	10 --> (min_node,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 38: Token <ID> Lexeme is_empty found
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6
	7
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9
	10 --> (min_node,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 38: Token <LPAREN> Lexeme ( found
Line# 38: Token <RPAREN> Lexeme ) found
Line# 38: Token <LCURL> Lexeme { found
Line# 39: Token <RETURN> Lexeme return found
Line# 39: Token <ID> Lexeme min_node found
	ScopeTable# 1.2.2
	1
	2
	3
	4
	5
	6
	7
	8
	9
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6
	7
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9
	10 --> (min_node,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 39: Token <RELOP> Lexeme == found
Line# 39: Token <ID> Lexeme nullptr found
	ScopeTable# 1.2.2
	1
	2
	3
	4
	5
	6
	7
	8 --> (nullptr,ID)
	9
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6
	7
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9
	10 --> (min_node,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 39: Token <SEMICOLON> Lexeme ; found
Line# 40: Token <RCURL> Lexeme } found
Line# 42: Token <SINGLE LINE COMMENT> Lexeme // Insert a new value into the heap found
Line# 43: Token <VOID> Lexeme void found
Line# 43: Token <ID> Lexeme insert found
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6
	7
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 43: Token <LPAREN> Lexeme ( found
Line# 43: Token <INT> Lexeme int found
Line# 43: Token <ID> Lexeme value found
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 43: Token <RPAREN> Lexeme ) found
Line# 43: Token <LCURL> Lexeme { found
Line# 44: Token <ID> Lexeme Node found
	ScopeTable# 1.2.3
	1
	2
	3
	4
	5 --> (Node,ID)
	6
	7
	8
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 44: Token <MULOP> Lexeme * found
Line# 44: Token <ID> Lexeme node found
	ScopeTable# 1.2.3
	1
	2
	3 --> (node,ID)
	4
	5 --> (Node,ID)
	6
	7
	8
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 44: Token <ASSIGNOP> Lexeme = found
Line# 44: Token <ID> Lexeme new found
	ScopeTable# 1.2.3
	1
	2
	3 --> (node,ID)
	4
	5 --> (Node,ID)
	6
	7
	8
	9 --> (new,ID)
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 44: Token <ID> Lexeme Node found
	Node already exists in the current ScopeTable
Line# 44: Token <LPAREN> Lexeme ( found
Line# 44: Token <ID> Lexeme value found
	ScopeTable# 1.2.3
	1
	2
	3 --> (node,ID)
	4
	5 --> (Node,ID)
	6 --> (value,ID)
	7
	8
	9 --> (new,ID)
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 44: Token <RPAREN> Lexeme ) found
Line# 44: Token <SEMICOLON> Lexeme ; found
Line# 45: Token <ID> Lexeme BinomialHeap found
	ScopeTable# 1.2.3
	1
	2
	3 --> (node,ID)
	4
	5 --> (Node,ID)
	6 --> (value,ID)
	7
	8 --> (BinomialHeap,ID)
	9 --> (new,ID)
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 45: Token <ID> Lexeme heap found
	ScopeTable# 1.2.3
	1
	2
	3 --> (node,ID) --> (heap,ID)
	4
	5 --> (Node,ID)
	6 --> (value,ID)
	7
	8 --> (BinomialHeap,ID)
	9 --> (new,ID)
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 45: Token <SEMICOLON> Lexeme ; found
Line# 46: Token <ID> Lexeme heap found
	heap already exists in the current ScopeTable
Error at line# 46: UNRECOGNIZED_CHAR .
Line# 46: Token <ID> Lexeme trees found
	ScopeTable# 1.2.3
	1
	2 --> (trees,ID)
	3 --> (node,ID) --> (heap,ID)
	4
	5 --> (Node,ID)
	6 --> (value,ID)
	7
	8 --> (BinomialHeap,ID)
	9 --> (new,ID)
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Error at line# 46: UNRECOGNIZED_CHAR .
Line# 46: Token <ID> Lexeme push_back found
	ScopeTable# 1.2.3
	1
	2 --> (trees,ID)
	3 --> (node,ID) --> (heap,ID)
	4
	5 --> (Node,ID) --> (push_back,ID)
	6 --> (value,ID)
	7
	8 --> (BinomialHeap,ID)
	9 --> (new,ID)
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 46: Token <LPAREN> Lexeme ( found
Line# 46: Token <ID> Lexeme node found
	node already exists in the current ScopeTable
Line# 46: Token <RPAREN> Lexeme ) found
Line# 46: Token <SEMICOLON> Lexeme ; found
Line# 47: Token <ID> Lexeme merge found
	ScopeTable# 1.2.3
	1
	2 --> (trees,ID)
	3 --> (node,ID) --> (heap,ID)
	4
	5 --> (Node,ID) --> (push_back,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (BinomialHeap,ID)
	9 --> (new,ID)
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 47: Token <LPAREN> Lexeme ( found
Line# 47: Token <ID> Lexeme heap found
	heap already exists in the current ScopeTable
Line# 47: Token <RPAREN> Lexeme ) found
Line# 47: Token <SEMICOLON> Lexeme ; found
Line# 48: Token <RCURL> Lexeme } found
Line# 50: Token <SINGLE LINE COMMENT> Lexeme // Get the minimum value in the heap found
Line# 51: Token <INT> Lexeme int found
Line# 51: Token <ID> Lexeme get_min found
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID) --> (get_min,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 51: Token <LPAREN> Lexeme ( found
Line# 51: Token <RPAREN> Lexeme ) found
Line# 51: Token <LCURL> Lexeme { found
Line# 52: Token <RETURN> Lexeme return found
Line# 52: Token <ID> Lexeme min_node found
	ScopeTable# 1.2.4
	1
	2
	3
	4
	5
	6
	7
	8
	9
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID) --> (get_min,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 52: Token <ADDOP> Lexeme - found
Line# 52: Token <RELOP> Lexeme > found
Line# 52: Token <ID> Lexeme value found
	ScopeTable# 1.2.4
	1
	2
	3
	4
	5
	6 --> (value,ID)
	7
	8
	9
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID) --> (get_min,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 52: Token <SEMICOLON> Lexeme ; found
Line# 53: Token <RCURL> Lexeme } found
Line# 55: Token <SINGLE LINE COMMENT> Lexeme // Extract the minimum value from the heap found
Line# 56: Token <INT> Lexeme int found
Line# 56: Token <ID> Lexeme extract_min found
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID) --> (get_min,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 56: Token <LPAREN> Lexeme ( found
Line# 56: Token <RPAREN> Lexeme ) found
Line# 56: Token <LCURL> Lexeme { found
Line# 57: Token <ID> Lexeme Node found
	ScopeTable# 1.2.5
	1
	2
	3
	4
	5 --> (Node,ID)
	6
	7
	8
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID) --> (get_min,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 57: Token <MULOP> Lexeme * found
Line# 57: Token <ID> Lexeme minNode found
	ScopeTable# 1.2.5
	1 --> (minNode,ID)
	2
	3
	4
	5 --> (Node,ID)
	6
	7
	8
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID) --> (get_min,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 57: Token <ASSIGNOP> Lexeme = found
Line# 57: Token <ID> Lexeme min_node found
	ScopeTable# 1.2.5
	1 --> (minNode,ID)
	2
	3
	4
	5 --> (Node,ID)
	6
	7
	8
	9
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID) --> (get_min,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 57: Token <SEMICOLON> Lexeme ; found
Line# 58: Token <ID> Lexeme trees found
	ScopeTable# 1.2.5
	1 --> (minNode,ID)
	2 --> (trees,ID)
	3
	4
	5 --> (Node,ID)
	6
	7
	8
	9
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID) --> (get_min,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Error at line# 58: UNRECOGNIZED_CHAR .
Line# 58: Token <ID> Lexeme erase found
	ScopeTable# 1.2.5
	1 --> (minNode,ID)
	2 --> (trees,ID)
	3
	4
	5 --> (Node,ID) --> (erase,ID)
	6
	7
	8
	9
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID) --> (get_min,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 58: Token <LPAREN> Lexeme ( found
Line# 58: Token <ID> Lexeme remove found
	ScopeTable# 1.2.5
	1 --> (minNode,ID)
	2 --> (trees,ID)
	3
	4
	5 --> (Node,ID) --> (erase,ID)
	6
	7
	8
	9 --> (remove,ID)
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID) --> (get_min,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 58: Token <LPAREN> Lexeme ( found
Line# 58: Token <ID> Lexeme trees found
	trees already exists in the current ScopeTable
Error at line# 58: UNRECOGNIZED_CHAR .
Line# 58: Token <ID> Lexeme begin found
	ScopeTable# 1.2.5
	1 --> (minNode,ID)
	2 --> (trees,ID)
	3
	4
	5 --> (Node,ID) --> (erase,ID)
	6
	7
	8 --> (begin,ID)
	9 --> (remove,ID)
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID) --> (get_min,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 58: Token <LPAREN> Lexeme ( found
Line# 58: Token <RPAREN> Lexeme ) found
Line# 58: Token <COMMA> Lexeme , found
Line# 58: Token <ID> Lexeme trees found
	trees already exists in the current ScopeTable
Error at line# 58: UNRECOGNIZED_CHAR .
Line# 58: Token <ID> Lexeme end found
	ScopeTable# 1.2.5
	1 --> (minNode,ID)
	2 --> (trees,ID) --> (end,ID)
	3
	4
	5 --> (Node,ID) --> (erase,ID)
	6
	7
	8 --> (begin,ID)
	9 --> (remove,ID)
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID) --> (get_min,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 58: Token <LPAREN> Lexeme ( found
Line# 58: Token <RPAREN> Lexeme ) found
Line# 58: Token <COMMA> Lexeme , found
Line# 58: Token <ID> Lexeme minNode found
	minNode already exists in the current ScopeTable
Line# 58: Token <RPAREN> Lexeme ) found
Line# 58: Token <COMMA> Lexeme , found
Line# 58: Token <ID> Lexeme trees found
	trees already exists in the current ScopeTable
Error at line# 58: UNRECOGNIZED_CHAR .
Line# 58: Token <ID> Lexeme end found
	end already exists in the current ScopeTable
Line# 58: Token <LPAREN> Lexeme ( found
Line# 58: Token <RPAREN> Lexeme ) found
Line# 58: Token <RPAREN> Lexeme ) found
Line# 58: Token <SEMICOLON> Lexeme ; found
Line# 59: Token <ID> Lexeme BinomialHeap found
	ScopeTable# 1.2.5
	1 --> (minNode,ID)
	2 --> (trees,ID) --> (end,ID)
	3
	4
	5 --> (Node,ID) --> (erase,ID)
	6
	7
	8 --> (begin,ID) --> (BinomialHeap,ID)
	9 --> (remove,ID)
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID) --> (get_min,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 59: Token <ID> Lexeme heap found
	ScopeTable# 1.2.5
	1 --> (minNode,ID)
	2 --> (trees,ID) --> (end,ID)
	3 --> (heap,ID)
	4
	5 --> (Node,ID) --> (erase,ID)
	6
	7
	8 --> (begin,ID) --> (BinomialHeap,ID)
	9 --> (remove,ID)
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID) --> (get_min,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 59: Token <SEMICOLON> Lexeme ; found
Line# 60: Token <ID> Lexeme heap found
	heap already exists in the current ScopeTable
Error at line# 60: UNRECOGNIZED_CHAR .
Line# 60: Token <ID> Lexeme trees found
	trees already exists in the current ScopeTable
Line# 60: Token <ASSIGNOP> Lexeme = found
Line# 60: Token <ID> Lexeme minNode found
	minNode already exists in the current ScopeTable
Line# 60: Token <ADDOP> Lexeme - found
Line# 60: Token <RELOP> Lexeme > found
Line# 60: Token <ID> Lexeme children found
	ScopeTable# 1.2.5
	1 --> (minNode,ID)
	2 --> (trees,ID) --> (end,ID) --> (children,ID)
	3 --> (heap,ID)
	4
	5 --> (Node,ID) --> (erase,ID)
	6
	7
	8 --> (begin,ID) --> (BinomialHeap,ID)
	9 --> (remove,ID)
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID) --> (get_min,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 60: Token <SEMICOLON> Lexeme ; found
Line# 61: Token <ID> Lexeme merge found
	ScopeTable# 1.2.5
	1 --> (minNode,ID)
	2 --> (trees,ID) --> (end,ID) --> (children,ID)
	3 --> (heap,ID)
	4
	5 --> (Node,ID) --> (erase,ID)
	6
	7 --> (merge,ID)
	8 --> (begin,ID) --> (BinomialHeap,ID)
	9 --> (remove,ID)
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID) --> (get_min,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 61: Token <LPAREN> Lexeme ( found
Line# 61: Token <ID> Lexeme heap found
	heap already exists in the current ScopeTable
Line# 61: Token <RPAREN> Lexeme ) found
Line# 61: Token <SEMICOLON> Lexeme ; found
Line# 62: Token <ID> Lexeme _find_min found
	ScopeTable# 1.2.5
	1 --> (minNode,ID)
	2 --> (trees,ID) --> (end,ID) --> (children,ID) --> (_find_min,ID)
	3 --> (heap,ID)
	4
	5 --> (Node,ID) --> (erase,ID)
	6
	7 --> (merge,ID)
	8 --> (begin,ID) --> (BinomialHeap,ID)
	9 --> (remove,ID)
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID) --> (get_min,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 62: Token <LPAREN> Lexeme ( found
Line# 62: Token <RPAREN> Lexeme ) found
Line# 62: Token <SEMICOLON> Lexeme ; found
Line# 63: Token <ID> Lexeme count found
	ScopeTable# 1.2.5
	1 --> (minNode,ID)
	2 --> (trees,ID) --> (end,ID) --> (children,ID) --> (_find_min,ID)
	3 --> (heap,ID)
	4
	5 --> (Node,ID) --> (erase,ID)
	6
	7 --> (merge,ID)
	8 --> (begin,ID) --> (BinomialHeap,ID) --> (count,ID)
	9 --> (remove,ID)
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID) --> (get_min,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 63: Token <ADDOP> Lexeme - found
Line# 63: Token <ASSIGNOP> Lexeme = found
Line# 63: Token <CONST_INT> Lexeme 1 found
Line# 63: Token <SEMICOLON> Lexeme ; found
Line# 64: Token <RETURN> Lexeme return found
Line# 64: Token <ID> Lexeme minNode found
	minNode already exists in the current ScopeTable
Line# 64: Token <ADDOP> Lexeme - found
Line# 64: Token <RELOP> Lexeme > found
Line# 64: Token <ID> Lexeme value found
	ScopeTable# 1.2.5
	1 --> (minNode,ID)
	2 --> (trees,ID) --> (end,ID) --> (children,ID) --> (_find_min,ID)
	3 --> (heap,ID)
	4
	5 --> (Node,ID) --> (erase,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (begin,ID) --> (BinomialHeap,ID) --> (count,ID)
	9 --> (remove,ID)
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID) --> (get_min,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 64: Token <SEMICOLON> Lexeme ; found
Line# 65: Token <RCURL> Lexeme } found
Line# 67: Token <SINGLE LINE COMMENT> Lexeme // Merge two binomial heaps found
Line# 68: Token <VOID> Lexeme void found
Line# 68: Token <ID> Lexeme merge found
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID) --> (get_min,ID)
	3
	4 --> (vector,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 68: Token <LPAREN> Lexeme ( found
Line# 68: Token <ID> Lexeme BinomialHeap found
	BinomialHeap already exists in the current ScopeTable
Line# 68: Token <BITOP> Lexeme & found
Line# 68: Token <ID> Lexeme other_heap found
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID) --> (get_min,ID)
	3
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 68: Token <RPAREN> Lexeme ) found
Line# 68: Token <LCURL> Lexeme { found
Line# 69: Token <ID> Lexeme trees found
	ScopeTable# 1.2.6
	1
	2 --> (trees,ID)
	3
	4
	5
	6
	7
	8
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID) --> (get_min,ID)
	3
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Error at line# 69: UNRECOGNIZED_CHAR .
Line# 69: Token <ID> Lexeme insert found
	ScopeTable# 1.2.6
	1
	2 --> (trees,ID)
	3
	4
	5
	6
	7
	8
	9
	10 --> (insert,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID) --> (get_min,ID)
	3
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 69: Token <LPAREN> Lexeme ( found
Line# 69: Token <ID> Lexeme trees found
	trees already exists in the current ScopeTable
Error at line# 69: UNRECOGNIZED_CHAR .
Line# 69: Token <ID> Lexeme end found
	ScopeTable# 1.2.6
	1
	2 --> (trees,ID) --> (end,ID)
	3
	4
	5
	6
	7
	8
	9
	10 --> (insert,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID) --> (get_min,ID)
	3
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 69: Token <LPAREN> Lexeme ( found
Line# 69: Token <RPAREN> Lexeme ) found
Line# 69: Token <COMMA> Lexeme , found
Line# 69: Token <ID> Lexeme other_heap found
	ScopeTable# 1.2.6
	1
	2 --> (trees,ID) --> (end,ID)
	3
	4 --> (other_heap,ID)
	5
	6
	7
	8
	9
	10 --> (insert,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID) --> (get_min,ID)
	3
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Error at line# 69: UNRECOGNIZED_CHAR .
Line# 69: Token <ID> Lexeme trees found
	trees already exists in the current ScopeTable
Error at line# 69: UNRECOGNIZED_CHAR .
Line# 69: Token <ID> Lexeme begin found
	ScopeTable# 1.2.6
	1
	2 --> (trees,ID) --> (end,ID)
	3
	4 --> (other_heap,ID)
	5
	6
	7
	8 --> (begin,ID)
	9
	10 --> (insert,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID) --> (get_min,ID)
	3
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 69: Token <LPAREN> Lexeme ( found
Line# 69: Token <RPAREN> Lexeme ) found
Line# 69: Token <COMMA> Lexeme , found
Line# 69: Token <ID> Lexeme other_heap found
	other_heap already exists in the current ScopeTable
Error at line# 69: UNRECOGNIZED_CHAR .
Line# 69: Token <ID> Lexeme trees found
	trees already exists in the current ScopeTable
Error at line# 69: UNRECOGNIZED_CHAR .
Line# 69: Token <ID> Lexeme end found
	end already exists in the current ScopeTable
Line# 69: Token <LPAREN> Lexeme ( found
Line# 69: Token <RPAREN> Lexeme ) found
Line# 69: Token <RPAREN> Lexeme ) found
Line# 69: Token <SEMICOLON> Lexeme ; found
Line# 70: Token <ID> Lexeme count found
	ScopeTable# 1.2.6
	1
	2 --> (trees,ID) --> (end,ID)
	3
	4 --> (other_heap,ID)
	5
	6
	7
	8 --> (begin,ID) --> (count,ID)
	9
	10 --> (insert,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID) --> (get_min,ID)
	3
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 70: Token <ADDOP> Lexeme + found
Line# 70: Token <ASSIGNOP> Lexeme = found
Line# 70: Token <ID> Lexeme other_heap found
	other_heap already exists in the current ScopeTable
Error at line# 70: UNRECOGNIZED_CHAR .
Line# 70: Token <ID> Lexeme count found
	count already exists in the current ScopeTable
Line# 70: Token <SEMICOLON> Lexeme ; found
Line# 71: Token <ID> Lexeme _find_min found
	ScopeTable# 1.2.6
	1
	2 --> (trees,ID) --> (end,ID) --> (_find_min,ID)
	3
	4 --> (other_heap,ID)
	5
	6
	7
	8 --> (begin,ID) --> (count,ID)
	9
	10 --> (insert,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID) --> (get_min,ID)
	3
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 71: Token <LPAREN> Lexeme ( found
Line# 71: Token <RPAREN> Lexeme ) found
Line# 71: Token <SEMICOLON> Lexeme ; found
Line# 72: Token <RCURL> Lexeme } found
Line# 74: Token <SINGLE LINE COMMENT> Lexeme // Find the minimum value in the heap found
Line# 75: Token <VOID> Lexeme void found
Line# 75: Token <ID> Lexeme _find_min found
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 75: Token <LPAREN> Lexeme ( found
Line# 75: Token <RPAREN> Lexeme ) found
Line# 75: Token <LCURL> Lexeme { found
Line# 76: Token <ID> Lexeme min_node found
	ScopeTable# 1.2.7
	1
	2
	3
	4
	5
	6
	7
	8
	9
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 76: Token <ASSIGNOP> Lexeme = found
Line# 76: Token <ID> Lexeme nullptr found
	ScopeTable# 1.2.7
	1
	2
	3
	4
	5
	6
	7
	8 --> (nullptr,ID)
	9
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 76: Token <SEMICOLON> Lexeme ; found
Line# 77: Token <FOR> Lexeme for found
Line# 77: Token <LPAREN> Lexeme ( found
Line# 77: Token <ID> Lexeme Node found
	ScopeTable# 1.2.7
	1
	2
	3
	4
	5 --> (Node,ID)
	6
	7
	8 --> (nullptr,ID)
	9
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 77: Token <MULOP> Lexeme * found
Line# 77: Token <ID> Lexeme tree found
	ScopeTable# 1.2.7
	1
	2
	3
	4
	5 --> (Node,ID)
	6
	7
	8 --> (nullptr,ID)
	9 --> (tree,ID)
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Error at line# 77: UNRECOGNIZED_CHAR :
Line# 77: Token <ID> Lexeme trees found
	ScopeTable# 1.2.7
	1
	2 --> (trees,ID)
	3
	4
	5 --> (Node,ID)
	6
	7
	8 --> (nullptr,ID)
	9 --> (tree,ID)
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 77: Token <RPAREN> Lexeme ) found
Line# 77: Token <LCURL> Lexeme { found
Line# 78: Token <IF> Lexeme if found
Line# 78: Token <LPAREN> Lexeme ( found
Line# 78: Token <ID> Lexeme min_node found
	ScopeTable# 1.2.7.1
	1
	2
	3
	4
	5
	6
	7
	8
	9
	10 --> (min_node,ID)
	ScopeTable# 1.2.7
	1
	2 --> (trees,ID)
	3
	4
	5 --> (Node,ID)
	6
	7
	8 --> (nullptr,ID)
	9 --> (tree,ID)
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 78: Token <RELOP> Lexeme == found
Line# 78: Token <ID> Lexeme nullptr found
	ScopeTable# 1.2.7.1
	1
	2
	3
	4
	5
	6
	7
	8 --> (nullptr,ID)
	9
	10 --> (min_node,ID)
	ScopeTable# 1.2.7
	1
	2 --> (trees,ID)
	3
	4
	5 --> (Node,ID)
	6
	7
	8 --> (nullptr,ID)
	9 --> (tree,ID)
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 78: Token <LOGICOP> Lexeme || found
Line# 78: Token <ID> Lexeme tree found
	ScopeTable# 1.2.7.1
	1
	2
	3
	4
	5
	6
	7
	8 --> (nullptr,ID)
	9 --> (tree,ID)
	10 --> (min_node,ID)
	ScopeTable# 1.2.7
	1
	2 --> (trees,ID)
	3
	4
	5 --> (Node,ID)
	6
	7
	8 --> (nullptr,ID)
	9 --> (tree,ID)
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 78: Token <ADDOP> Lexeme - found
Line# 78: Token <RELOP> Lexeme > found
Line# 78: Token <ID> Lexeme value found
	ScopeTable# 1.2.7.1
	1
	2
	3
	4
	5
	6 --> (value,ID)
	7
	8 --> (nullptr,ID)
	9 --> (tree,ID)
	10 --> (min_node,ID)
	ScopeTable# 1.2.7
	1
	2 --> (trees,ID)
	3
	4
	5 --> (Node,ID)
	6
	7
	8 --> (nullptr,ID)
	9 --> (tree,ID)
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 78: Token <RELOP> Lexeme < found
Line# 78: Token <ID> Lexeme min_node found
	min_node already exists in the current ScopeTable
Line# 78: Token <ADDOP> Lexeme - found
Line# 78: Token <RELOP> Lexeme > found
Line# 78: Token <ID> Lexeme value found
	value already exists in the current ScopeTable
Line# 78: Token <RPAREN> Lexeme ) found
Line# 78: Token <LCURL> Lexeme { found
Line# 79: Token <ID> Lexeme min_node found
	ScopeTable# 1.2.7.1.1
	1
	2
	3
	4
	5
	6
	7
	8
	9
	10 --> (min_node,ID)
	ScopeTable# 1.2.7.1
	1
	2
	3
	4
	5
	6 --> (value,ID)
	7
	8 --> (nullptr,ID)
	9 --> (tree,ID)
	10 --> (min_node,ID)
	ScopeTable# 1.2.7
	1
	2 --> (trees,ID)
	3
	4
	5 --> (Node,ID)
	6
	7
	8 --> (nullptr,ID)
	9 --> (tree,ID)
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 79: Token <ASSIGNOP> Lexeme = found
Line# 79: Token <ID> Lexeme tree found
	ScopeTable# 1.2.7.1.1
	1
	2
	3
	4
	5
	6
	7
	8
	9 --> (tree,ID)
	10 --> (min_node,ID)
	ScopeTable# 1.2.7.1
	1
	2
	3
	4
	5
	6 --> (value,ID)
	7
	8 --> (nullptr,ID)
	9 --> (tree,ID)
	10 --> (min_node,ID)
	ScopeTable# 1.2.7
	1
	2 --> (trees,ID)
	3
	4
	5 --> (Node,ID)
	6
	7
	8 --> (nullptr,ID)
	9 --> (tree,ID)
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 79: Token <SEMICOLON> Lexeme ; found
Line# 80: Token <RCURL> Lexeme } found
Line# 81: Token <RCURL> Lexeme } found
Line# 82: Token <RCURL> Lexeme } found
Line# 84: Token <SINGLE LINE COMMENT> Lexeme // Decrease the key of a node found
Line# 85: Token <VOID> Lexeme void found
Line# 85: Token <ID> Lexeme decrease_key found
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 85: Token <LPAREN> Lexeme ( found
Line# 85: Token <ID> Lexeme Node found
	Node already exists in the current ScopeTable
Line# 85: Token <MULOP> Lexeme * found
Line# 85: Token <ID> Lexeme node found
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 85: Token <COMMA> Lexeme , found
Line# 85: Token <INT> Lexeme int found
Line# 85: Token <ID> Lexeme new_value found
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 85: Token <RPAREN> Lexeme ) found
Line# 85: Token <LCURL> Lexeme { found
Line# 86: Token <IF> Lexeme if found
Line# 86: Token <LPAREN> Lexeme ( found
Line# 86: Token <ID> Lexeme new_value found
	ScopeTable# 1.2.8
	1 --> (new_value,ID)
	2
	3
	4
	5
	6
	7
	8
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 86: Token <RELOP> Lexeme > found
Line# 86: Token <ID> Lexeme node found
	ScopeTable# 1.2.8
	1 --> (new_value,ID)
	2
	3 --> (node,ID)
	4
	5
	6
	7
	8
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 86: Token <ADDOP> Lexeme - found
Line# 86: Token <RELOP> Lexeme > found
Line# 86: Token <ID> Lexeme value found
	ScopeTable# 1.2.8
	1 --> (new_value,ID)
	2
	3 --> (node,ID)
	4
	5
	6 --> (value,ID)
	7
	8
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 86: Token <RPAREN> Lexeme ) found
Line# 86: Token <LCURL> Lexeme { found
Line# 87: Token <ID> Lexeme throw found
	ScopeTable# 1.2.8.1
	1
	2
	3
	4
	5
	6
	7
	8
	9 --> (throw,ID)
	10
	ScopeTable# 1.2.8
	1 --> (new_value,ID)
	2
	3 --> (node,ID)
	4
	5
	6 --> (value,ID)
	7
	8
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 87: Token <ID> Lexeme invalid_argument found
	ScopeTable# 1.2.8.1
	1
	2
	3
	4
	5
	6 --> (invalid_argument,ID)
	7
	8
	9 --> (throw,ID)
	10
	ScopeTable# 1.2.8
	1 --> (new_value,ID)
	2
	3 --> (node,ID)
	4
	5
	6 --> (value,ID)
	7
	8
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 87: Token <LPAREN> Lexeme ( found
Line# 87: Token <SINGLE LINE STRING> Lexeme "New value is greater than the current value" found
Line# 87: Token <RPAREN> Lexeme ) found
Line# 87: Token <SEMICOLON> Lexeme ; found
Line# 88: Token <RCURL> Lexeme } found
Line# 89: Token <ID> Lexeme node found
	node already exists in the current ScopeTable
Line# 89: Token <ADDOP> Lexeme - found
Line# 89: Token <RELOP> Lexeme > found
Line# 89: Token <ID> Lexeme value found
	value already exists in the current ScopeTable
Line# 89: Token <ASSIGNOP> Lexeme = found
Line# 89: Token <ID> Lexeme new_value found
	new_value already exists in the current ScopeTable
Line# 89: Token <SEMICOLON> Lexeme ; found
Line# 90: Token <ID> Lexeme _bubble_up found
	ScopeTable# 1.2.8
	1 --> (new_value,ID)
	2
	3 --> (node,ID)
	4
	5
	6 --> (value,ID)
	7
	8 --> (_bubble_up,ID)
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 90: Token <LPAREN> Lexeme ( found
Line# 90: Token <ID> Lexeme node found
	node already exists in the current ScopeTable
Line# 90: Token <RPAREN> Lexeme ) found
Line# 90: Token <SEMICOLON> Lexeme ; found
Line# 91: Token <RCURL> Lexeme } found
Line# 93: Token <SINGLE LINE COMMENT> Lexeme // Delete a specific node from the heap found
Line# 94: Token <VOID> Lexeme void found
Line# 94: Token <ID> Lexeme delete_node found
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 94: Token <LPAREN> Lexeme ( found
Line# 94: Token <ID> Lexeme Node found
	Node already exists in the current ScopeTable
Line# 94: Token <MULOP> Lexeme * found
Line# 94: Token <ID> Lexeme node found
	node already exists in the current ScopeTable
Line# 94: Token <RPAREN> Lexeme ) found
Line# 94: Token <LCURL> Lexeme { found
Line# 95: Token <ID> Lexeme decrease_key found
	ScopeTable# 1.2.9
	1
	2
	3
	4
	5
	6
	7
	8
	9 --> (decrease_key,ID)
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 95: Token <LPAREN> Lexeme ( found
Line# 95: Token <ID> Lexeme node found
	ScopeTable# 1.2.9
	1
	2
	3 --> (node,ID)
	4
	5
	6
	7
	8
	9 --> (decrease_key,ID)
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 95: Token <COMMA> Lexeme , found
Line# 95: Token <ID> Lexeme INT_MIN found
	ScopeTable# 1.2.9
	1 --> (INT_MIN,ID)
	2
	3 --> (node,ID)
	4
	5
	6
	7
	8
	9 --> (decrease_key,ID)
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 95: Token <RPAREN> Lexeme ) found
Line# 95: Token <SEMICOLON> Lexeme ; found
Line# 96: Token <ID> Lexeme extract_min found
	ScopeTable# 1.2.9
	1 --> (INT_MIN,ID)
	2
	3 --> (node,ID)
	4
	5
	6
	7
	8
	9 --> (decrease_key,ID) --> (extract_min,ID)
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 96: Token <LPAREN> Lexeme ( found
Line# 96: Token <RPAREN> Lexeme ) found
Line# 96: Token <SEMICOLON> Lexeme ; found
Line# 97: Token <RCURL> Lexeme } found
Line# 99: Token <SINGLE LINE COMMENT> Lexeme // Perform the bubbling up operation found
Line# 100: Token <VOID> Lexeme void found
Line# 100: Token <ID> Lexeme _bubble_up found
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 100: Token <LPAREN> Lexeme ( found
Line# 100: Token <ID> Lexeme Node found
	Node already exists in the current ScopeTable
Line# 100: Token <MULOP> Lexeme * found
Line# 100: Token <ID> Lexeme node found
	node already exists in the current ScopeTable
Line# 100: Token <RPAREN> Lexeme ) found
Line# 100: Token <LCURL> Lexeme { found
Line# 101: Token <ID> Lexeme Node found
	ScopeTable# 1.2.10
	1
	2
	3
	4
	5 --> (Node,ID)
	6
	7
	8
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 101: Token <MULOP> Lexeme * found
Line# 101: Token <ID> Lexeme parent found
	ScopeTable# 1.2.10
	1
	2
	3
	4
	5 --> (Node,ID)
	6
	7 --> (parent,ID)
	8
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 101: Token <ASSIGNOP> Lexeme = found
Line# 101: Token <ID> Lexeme node found
	ScopeTable# 1.2.10
	1
	2
	3 --> (node,ID)
	4
	5 --> (Node,ID)
	6
	7 --> (parent,ID)
	8
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 101: Token <ADDOP> Lexeme - found
Line# 101: Token <RELOP> Lexeme > found
Line# 101: Token <ID> Lexeme parent found
	parent already exists in the current ScopeTable
Line# 101: Token <SEMICOLON> Lexeme ; found
Line# 102: Token <WHILE> Lexeme while found
Line# 102: Token <LPAREN> Lexeme ( found
Line# 102: Token <ID> Lexeme parent found
	parent already exists in the current ScopeTable
Line# 102: Token <RELOP> Lexeme != found
Line# 102: Token <ID> Lexeme nullptr found
	ScopeTable# 1.2.10
	1
	2
	3 --> (node,ID)
	4
	5 --> (Node,ID)
	6
	7 --> (parent,ID)
	8 --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 102: Token <LOGICOP> Lexeme && found
Line# 102: Token <ID> Lexeme node found
	node already exists in the current ScopeTable
Line# 102: Token <ADDOP> Lexeme - found
Line# 102: Token <RELOP> Lexeme > found
Line# 102: Token <ID> Lexeme value found
	ScopeTable# 1.2.10
	1
	2
	3 --> (node,ID)
	4
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (parent,ID)
	8 --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 102: Token <RELOP> Lexeme < found
Line# 102: Token <ID> Lexeme parent found
	parent already exists in the current ScopeTable
Line# 102: Token <ADDOP> Lexeme - found
Line# 102: Token <RELOP> Lexeme > found
Line# 102: Token <ID> Lexeme value found
	value already exists in the current ScopeTable
Line# 102: Token <RPAREN> Lexeme ) found
Line# 102: Token <LCURL> Lexeme { found
Line# 103: Token <ID> Lexeme swap found
	ScopeTable# 1.2.10.1
	1
	2
	3
	4
	5
	6
	7
	8
	9
	10 --> (swap,ID)
	ScopeTable# 1.2.10
	1
	2
	3 --> (node,ID)
	4
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (parent,ID)
	8 --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 103: Token <LPAREN> Lexeme ( found
Line# 103: Token <ID> Lexeme node found
	ScopeTable# 1.2.10.1
	1
	2
	3 --> (node,ID)
	4
	5
	6
	7
	8
	9
	10 --> (swap,ID)
	ScopeTable# 1.2.10
	1
	2
	3 --> (node,ID)
	4
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (parent,ID)
	8 --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 103: Token <ADDOP> Lexeme - found
Line# 103: Token <RELOP> Lexeme > found
Line# 103: Token <ID> Lexeme value found
	ScopeTable# 1.2.10.1
	1
	2
	3 --> (node,ID)
	4
	5
	6 --> (value,ID)
	7
	8
	9
	10 --> (swap,ID)
	ScopeTable# 1.2.10
	1
	2
	3 --> (node,ID)
	4
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (parent,ID)
	8 --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 103: Token <COMMA> Lexeme , found
Line# 103: Token <ID> Lexeme parent found
	ScopeTable# 1.2.10.1
	1
	2
	3 --> (node,ID)
	4
	5
	6 --> (value,ID)
	7 --> (parent,ID)
	8
	9
	10 --> (swap,ID)
	ScopeTable# 1.2.10
	1
	2
	3 --> (node,ID)
	4
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (parent,ID)
	8 --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 103: Token <ADDOP> Lexeme - found
Line# 103: Token <RELOP> Lexeme > found
Line# 103: Token <ID> Lexeme value found
	value already exists in the current ScopeTable
Line# 103: Token <RPAREN> Lexeme ) found
Line# 103: Token <SEMICOLON> Lexeme ; found
Line# 104: Token <ID> Lexeme node found
	node already exists in the current ScopeTable
Line# 104: Token <ASSIGNOP> Lexeme = found
Line# 104: Token <ID> Lexeme parent found
	parent already exists in the current ScopeTable
Line# 104: Token <SEMICOLON> Lexeme ; found
Line# 105: Token <ID> Lexeme parent found
	parent already exists in the current ScopeTable
Line# 105: Token <ASSIGNOP> Lexeme = found
Line# 105: Token <ID> Lexeme node found
	node already exists in the current ScopeTable
Line# 105: Token <ADDOP> Lexeme - found
Line# 105: Token <RELOP> Lexeme > found
Line# 105: Token <ID> Lexeme parent found
	parent already exists in the current ScopeTable
Line# 105: Token <SEMICOLON> Lexeme ; found
Line# 106: Token <RCURL> Lexeme } found
Line# 107: Token <RCURL> Lexeme } found
Line# 109: Token <SINGLE LINE COMMENT> Lexeme // Link two trees together found
Line# 110: Token <VOID> Lexeme void found
Line# 110: Token <ID> Lexeme _link found
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID)
	6 --> (value,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 110: Token <LPAREN> Lexeme ( found
Line# 110: Token <ID> Lexeme Node found
	Node already exists in the current ScopeTable
Line# 110: Token <MULOP> Lexeme * found
Line# 110: Token <ID> Lexeme tree1 found
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 110: Token <COMMA> Lexeme , found
Line# 110: Token <ID> Lexeme Node found
	Node already exists in the current ScopeTable
Line# 110: Token <MULOP> Lexeme * found
Line# 110: Token <ID> Lexeme tree2 found
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 110: Token <RPAREN> Lexeme ) found
Line# 110: Token <LCURL> Lexeme { found
Line# 111: Token <IF> Lexeme if found
Line# 111: Token <LPAREN> Lexeme ( found
Line# 111: Token <ID> Lexeme tree1 found
	ScopeTable# 1.2.11
	1
	2
	3
	4
	5
	6 --> (tree1,ID)
	7
	8
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 111: Token <ADDOP> Lexeme - found
Line# 111: Token <RELOP> Lexeme > found
Line# 111: Token <ID> Lexeme value found
	ScopeTable# 1.2.11
	1
	2
	3
	4
	5
	6 --> (tree1,ID) --> (value,ID)
	7
	8
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 111: Token <RELOP> Lexeme > found
Line# 111: Token <ID> Lexeme tree2 found
	ScopeTable# 1.2.11
	1
	2
	3
	4
	5
	6 --> (tree1,ID) --> (value,ID)
	7 --> (tree2,ID)
	8
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 111: Token <ADDOP> Lexeme - found
Line# 111: Token <RELOP> Lexeme > found
Line# 111: Token <ID> Lexeme value found
	value already exists in the current ScopeTable
Line# 111: Token <RPAREN> Lexeme ) found
Line# 111: Token <LCURL> Lexeme { found
Line# 112: Token <ID> Lexeme swap found
	ScopeTable# 1.2.11.1
	1
	2
	3
	4
	5
	6
	7
	8
	9
	10 --> (swap,ID)
	ScopeTable# 1.2.11
	1
	2
	3
	4
	5
	6 --> (tree1,ID) --> (value,ID)
	7 --> (tree2,ID)
	8
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 112: Token <LPAREN> Lexeme ( found
Line# 112: Token <ID> Lexeme tree1 found
	ScopeTable# 1.2.11.1
	1
	2
	3
	4
	5
	6 --> (tree1,ID)
	7
	8
	9
	10 --> (swap,ID)
	ScopeTable# 1.2.11
	1
	2
	3
	4
	5
	6 --> (tree1,ID) --> (value,ID)
	7 --> (tree2,ID)
	8
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 112: Token <COMMA> Lexeme , found
Line# 112: Token <ID> Lexeme tree2 found
	ScopeTable# 1.2.11.1
	1
	2
	3
	4
	5
	6 --> (tree1,ID)
	7 --> (tree2,ID)
	8
	9
	10 --> (swap,ID)
	ScopeTable# 1.2.11
	1
	2
	3
	4
	5
	6 --> (tree1,ID) --> (value,ID)
	7 --> (tree2,ID)
	8
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 112: Token <RPAREN> Lexeme ) found
Line# 112: Token <SEMICOLON> Lexeme ; found
Line# 113: Token <RCURL> Lexeme } found
Line# 114: Token <ID> Lexeme tree2 found
	tree2 already exists in the current ScopeTable
Line# 114: Token <ADDOP> Lexeme - found
Line# 114: Token <RELOP> Lexeme > found
Line# 114: Token <ID> Lexeme parent found
	ScopeTable# 1.2.11
	1
	2
	3
	4
	5
	6 --> (tree1,ID) --> (value,ID)
	7 --> (tree2,ID) --> (parent,ID)
	8
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 114: Token <ASSIGNOP> Lexeme = found
Line# 114: Token <ID> Lexeme tree1 found
	tree1 already exists in the current ScopeTable
Line# 114: Token <SEMICOLON> Lexeme ; found
Line# 115: Token <ID> Lexeme tree1 found
	tree1 already exists in the current ScopeTable
Line# 115: Token <ADDOP> Lexeme - found
Line# 115: Token <RELOP> Lexeme > found
Line# 115: Token <ID> Lexeme children found
	ScopeTable# 1.2.11
	1
	2 --> (children,ID)
	3
	4
	5
	6 --> (tree1,ID) --> (value,ID)
	7 --> (tree2,ID) --> (parent,ID)
	8
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Error at line# 115: UNRECOGNIZED_CHAR .
Line# 115: Token <ID> Lexeme push_back found
	ScopeTable# 1.2.11
	1
	2 --> (children,ID)
	3
	4
	5 --> (push_back,ID)
	6 --> (tree1,ID) --> (value,ID)
	7 --> (tree2,ID) --> (parent,ID)
	8
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 115: Token <LPAREN> Lexeme ( found
Line# 115: Token <ID> Lexeme tree2 found
	tree2 already exists in the current ScopeTable
Line# 115: Token <RPAREN> Lexeme ) found
Line# 115: Token <SEMICOLON> Lexeme ; found
Line# 116: Token <ID> Lexeme tree1 found
	tree1 already exists in the current ScopeTable
Line# 116: Token <ADDOP> Lexeme - found
Line# 116: Token <RELOP> Lexeme > found
Line# 116: Token <ID> Lexeme degree found
	ScopeTable# 1.2.11
	1 --> (degree,ID)
	2 --> (children,ID)
	3
	4
	5 --> (push_back,ID)
	6 --> (tree1,ID) --> (value,ID)
	7 --> (tree2,ID) --> (parent,ID)
	8
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 116: Token <ADDOP> Lexeme + found
Line# 116: Token <ASSIGNOP> Lexeme = found
Line# 116: Token <CONST_INT> Lexeme 1 found
Line# 116: Token <SEMICOLON> Lexeme ; found
Line# 117: Token <RCURL> Lexeme } found
Line# 119: Token <SINGLE LINE COMMENT> Lexeme // Consolidate the trees in the heap found
Line# 120: Token <VOID> Lexeme void found
Line# 120: Token <ID> Lexeme _consolidate found
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 120: Token <LPAREN> Lexeme ( found
Line# 120: Token <RPAREN> Lexeme ) found
Line# 120: Token <LCURL> Lexeme { found
Line# 121: Token <INT> Lexeme int found
Line# 121: Token <ID> Lexeme max_degree found
	ScopeTable# 1.2.12
	1
	2
	3
	4 --> (max_degree,ID)
	5
	6
	7
	8
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 121: Token <ASSIGNOP> Lexeme = found
Line# 121: Token <ID> Lexeme static_cast found
	ScopeTable# 1.2.12
	1
	2
	3 --> (static_cast,ID)
	4 --> (max_degree,ID)
	5
	6
	7
	8
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 121: Token <RELOP> Lexeme < found
Line# 121: Token <INT> Lexeme int found
Line# 121: Token <RELOP> Lexeme > found
Line# 121: Token <LPAREN> Lexeme ( found
Line# 121: Token <ID> Lexeme floor found
	ScopeTable# 1.2.12
	1
	2
	3 --> (static_cast,ID)
	4 --> (max_degree,ID)
	5
	6
	7 --> (floor,ID)
	8
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 121: Token <LPAREN> Lexeme ( found
Line# 121: Token <ID> Lexeme log2 found
	ScopeTable# 1.2.12
	1 --> (log2,ID)
	2
	3 --> (static_cast,ID)
	4 --> (max_degree,ID)
	5
	6
	7 --> (floor,ID)
	8
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 121: Token <LPAREN> Lexeme ( found
Line# 121: Token <ID> Lexeme count found
	ScopeTable# 1.2.12
	1 --> (log2,ID)
	2
	3 --> (static_cast,ID)
	4 --> (max_degree,ID)
	5
	6
	7 --> (floor,ID)
	8 --> (count,ID)
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 121: Token <RPAREN> Lexeme ) found
Line# 121: Token <RPAREN> Lexeme ) found
Line# 121: Token <RPAREN> Lexeme ) found
Line# 121: Token <ADDOP> Lexeme + found
Line# 121: Token <CONST_INT> Lexeme 1 found
Line# 121: Token <SEMICOLON> Lexeme ; found
Line# 122: Token <ID> Lexeme vector found
	ScopeTable# 1.2.12
	1 --> (log2,ID)
	2
	3 --> (static_cast,ID)
	4 --> (max_degree,ID) --> (vector,ID)
	5
	6
	7 --> (floor,ID)
	8 --> (count,ID)
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 122: Token <RELOP> Lexeme < found
Line# 122: Token <ID> Lexeme Node found
	ScopeTable# 1.2.12
	1 --> (log2,ID)
	2
	3 --> (static_cast,ID)
	4 --> (max_degree,ID) --> (vector,ID)
	5 --> (Node,ID)
	6
	7 --> (floor,ID)
	8 --> (count,ID)
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 122: Token <MULOP> Lexeme * found
Line# 122: Token <RELOP> Lexeme > found
Line# 122: Token <ID> Lexeme degree_to_tree found
	ScopeTable# 1.2.12
	1 --> (log2,ID)
	2
	3 --> (static_cast,ID)
	4 --> (max_degree,ID) --> (vector,ID) --> (degree_to_tree,ID)
	5 --> (Node,ID)
	6
	7 --> (floor,ID)
	8 --> (count,ID)
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 122: Token <LPAREN> Lexeme ( found
Line# 122: Token <ID> Lexeme max_degree found
	max_degree already exists in the current ScopeTable
Line# 122: Token <ADDOP> Lexeme + found
Line# 122: Token <CONST_INT> Lexeme 1 found
Line# 122: Token <COMMA> Lexeme , found
Line# 122: Token <ID> Lexeme nullptr found
	ScopeTable# 1.2.12
	1 --> (log2,ID)
	2
	3 --> (static_cast,ID)
	4 --> (max_degree,ID) --> (vector,ID) --> (degree_to_tree,ID)
	5 --> (Node,ID)
	6
	7 --> (floor,ID)
	8 --> (count,ID) --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 122: Token <RPAREN> Lexeme ) found
Line# 122: Token <SEMICOLON> Lexeme ; found
Line# 124: Token <WHILE> Lexeme while found
Line# 124: Token <LPAREN> Lexeme ( found
Line# 124: Token <NOT> Lexeme ! found
Line# 124: Token <ID> Lexeme trees found
	ScopeTable# 1.2.12
	1 --> (log2,ID)
	2 --> (trees,ID)
	3 --> (static_cast,ID)
	4 --> (max_degree,ID) --> (vector,ID) --> (degree_to_tree,ID)
	5 --> (Node,ID)
	6
	7 --> (floor,ID)
	8 --> (count,ID) --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Error at line# 124: UNRECOGNIZED_CHAR .
Line# 124: Token <ID> Lexeme empty found
	ScopeTable# 1.2.12
	1 --> (log2,ID)
	2 --> (trees,ID)
	3 --> (static_cast,ID)
	4 --> (max_degree,ID) --> (vector,ID) --> (degree_to_tree,ID) --> (empty,ID)
	5 --> (Node,ID)
	6
	7 --> (floor,ID)
	8 --> (count,ID) --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 124: Token <LPAREN> Lexeme ( found
Line# 124: Token <RPAREN> Lexeme ) found
Line# 124: Token <RPAREN> Lexeme ) found
Line# 124: Token <LCURL> Lexeme { found
Line# 125: Token <ID> Lexeme Node found
	ScopeTable# 1.2.12.1
	1
	2
	3
	4
	5 --> (Node,ID)
	6
	7
	8
	9
	10
	ScopeTable# 1.2.12
	1 --> (log2,ID)
	2 --> (trees,ID)
	3 --> (static_cast,ID)
	4 --> (max_degree,ID) --> (vector,ID) --> (degree_to_tree,ID) --> (empty,ID)
	5 --> (Node,ID)
	6
	7 --> (floor,ID)
	8 --> (count,ID) --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 125: Token <MULOP> Lexeme * found
Line# 125: Token <ID> Lexeme current found
	ScopeTable# 1.2.12.1
	1
	2 --> (current,ID)
	3
	4
	5 --> (Node,ID)
	6
	7
	8
	9
	10
	ScopeTable# 1.2.12
	1 --> (log2,ID)
	2 --> (trees,ID)
	3 --> (static_cast,ID)
	4 --> (max_degree,ID) --> (vector,ID) --> (degree_to_tree,ID) --> (empty,ID)
	5 --> (Node,ID)
	6
	7 --> (floor,ID)
	8 --> (count,ID) --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 125: Token <ASSIGNOP> Lexeme = found
Line# 125: Token <ID> Lexeme trees found
	ScopeTable# 1.2.12.1
	1
	2 --> (current,ID) --> (trees,ID)
	3
	4
	5 --> (Node,ID)
	6
	7
	8
	9
	10
	ScopeTable# 1.2.12
	1 --> (log2,ID)
	2 --> (trees,ID)
	3 --> (static_cast,ID)
	4 --> (max_degree,ID) --> (vector,ID) --> (degree_to_tree,ID) --> (empty,ID)
	5 --> (Node,ID)
	6
	7 --> (floor,ID)
	8 --> (count,ID) --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 125: Token <LSQUARE> Lexeme [ found
Line# 125: Token <CONST_INT> Lexeme 0 found
Line# 125: Token <RSQUARE> Lexeme ] found
Line# 125: Token <SEMICOLON> Lexeme ; found
Line# 126: Token <ID> Lexeme trees found
	trees already exists in the current ScopeTable
Error at line# 126: UNRECOGNIZED_CHAR .
Line# 126: Token <ID> Lexeme erase found
	ScopeTable# 1.2.12.1
	1
	2 --> (current,ID) --> (trees,ID)
	3
	4
	5 --> (Node,ID) --> (erase,ID)
	6
	7
	8
	9
	10
	ScopeTable# 1.2.12
	1 --> (log2,ID)
	2 --> (trees,ID)
	3 --> (static_cast,ID)
	4 --> (max_degree,ID) --> (vector,ID) --> (degree_to_tree,ID) --> (empty,ID)
	5 --> (Node,ID)
	6
	7 --> (floor,ID)
	8 --> (count,ID) --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 126: Token <LPAREN> Lexeme ( found
Line# 126: Token <ID> Lexeme trees found
	trees already exists in the current ScopeTable
Error at line# 126: UNRECOGNIZED_CHAR .
Line# 126: Token <ID> Lexeme begin found
	ScopeTable# 1.2.12.1
	1
	2 --> (current,ID) --> (trees,ID)
	3
	4
	5 --> (Node,ID) --> (erase,ID)
	6
	7
	8 --> (begin,ID)
	9
	10
	ScopeTable# 1.2.12
	1 --> (log2,ID)
	2 --> (trees,ID)
	3 --> (static_cast,ID)
	4 --> (max_degree,ID) --> (vector,ID) --> (degree_to_tree,ID) --> (empty,ID)
	5 --> (Node,ID)
	6
	7 --> (floor,ID)
	8 --> (count,ID) --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 126: Token <LPAREN> Lexeme ( found
Line# 126: Token <RPAREN> Lexeme ) found
Line# 126: Token <RPAREN> Lexeme ) found
Line# 126: Token <SEMICOLON> Lexeme ; found
Line# 127: Token <INT> Lexeme int found
Line# 127: Token <ID> Lexeme degree found
	ScopeTable# 1.2.12.1
	1 --> (degree,ID)
	2 --> (current,ID) --> (trees,ID)
	3
	4
	5 --> (Node,ID) --> (erase,ID)
	6
	7
	8 --> (begin,ID)
	9
	10
	ScopeTable# 1.2.12
	1 --> (log2,ID)
	2 --> (trees,ID)
	3 --> (static_cast,ID)
	4 --> (max_degree,ID) --> (vector,ID) --> (degree_to_tree,ID) --> (empty,ID)
	5 --> (Node,ID)
	6
	7 --> (floor,ID)
	8 --> (count,ID) --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 127: Token <ASSIGNOP> Lexeme = found
Line# 127: Token <ID> Lexeme current found
	current already exists in the current ScopeTable
Line# 127: Token <ADDOP> Lexeme - found
Line# 127: Token <RELOP> Lexeme > found
Line# 127: Token <ID> Lexeme degree found
	degree already exists in the current ScopeTable
Line# 127: Token <SEMICOLON> Lexeme ; found
Line# 128: Token <WHILE> Lexeme while found
Line# 128: Token <LPAREN> Lexeme ( found
Line# 128: Token <ID> Lexeme degree_to_tree found
	ScopeTable# 1.2.12.1
	1 --> (degree,ID)
	2 --> (current,ID) --> (trees,ID)
	3
	4 --> (degree_to_tree,ID)
	5 --> (Node,ID) --> (erase,ID)
	6
	7
	8 --> (begin,ID)
	9
	10
	ScopeTable# 1.2.12
	1 --> (log2,ID)
	2 --> (trees,ID)
	3 --> (static_cast,ID)
	4 --> (max_degree,ID) --> (vector,ID) --> (degree_to_tree,ID) --> (empty,ID)
	5 --> (Node,ID)
	6
	7 --> (floor,ID)
	8 --> (count,ID) --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 128: Token <LSQUARE> Lexeme [ found
Line# 128: Token <ID> Lexeme degree found
	degree already exists in the current ScopeTable
Line# 128: Token <RSQUARE> Lexeme ] found
Line# 128: Token <RELOP> Lexeme != found
Line# 128: Token <ID> Lexeme nullptr found
	ScopeTable# 1.2.12.1
	1 --> (degree,ID)
	2 --> (current,ID) --> (trees,ID)
	3
	4 --> (degree_to_tree,ID)
	5 --> (Node,ID) --> (erase,ID)
	6
	7
	8 --> (begin,ID) --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2.12
	1 --> (log2,ID)
	2 --> (trees,ID)
	3 --> (static_cast,ID)
	4 --> (max_degree,ID) --> (vector,ID) --> (degree_to_tree,ID) --> (empty,ID)
	5 --> (Node,ID)
	6
	7 --> (floor,ID)
	8 --> (count,ID) --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 128: Token <RPAREN> Lexeme ) found
Line# 128: Token <LCURL> Lexeme { found
Line# 129: Token <ID> Lexeme Node found
	ScopeTable# 1.2.12.1.1
	1
	2
	3
	4
	5 --> (Node,ID)
	6
	7
	8
	9
	10
	ScopeTable# 1.2.12.1
	1 --> (degree,ID)
	2 --> (current,ID) --> (trees,ID)
	3
	4 --> (degree_to_tree,ID)
	5 --> (Node,ID) --> (erase,ID)
	6
	7
	8 --> (begin,ID) --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2.12
	1 --> (log2,ID)
	2 --> (trees,ID)
	3 --> (static_cast,ID)
	4 --> (max_degree,ID) --> (vector,ID) --> (degree_to_tree,ID) --> (empty,ID)
	5 --> (Node,ID)
	6
	7 --> (floor,ID)
	8 --> (count,ID) --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 129: Token <MULOP> Lexeme * found
Line# 129: Token <ID> Lexeme other found
	ScopeTable# 1.2.12.1.1
	1
	2
	3
	4
	5 --> (Node,ID)
	6
	7 --> (other,ID)
	8
	9
	10
	ScopeTable# 1.2.12.1
	1 --> (degree,ID)
	2 --> (current,ID) --> (trees,ID)
	3
	4 --> (degree_to_tree,ID)
	5 --> (Node,ID) --> (erase,ID)
	6
	7
	8 --> (begin,ID) --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2.12
	1 --> (log2,ID)
	2 --> (trees,ID)
	3 --> (static_cast,ID)
	4 --> (max_degree,ID) --> (vector,ID) --> (degree_to_tree,ID) --> (empty,ID)
	5 --> (Node,ID)
	6
	7 --> (floor,ID)
	8 --> (count,ID) --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 129: Token <ASSIGNOP> Lexeme = found
Line# 129: Token <ID> Lexeme degree_to_tree found
	ScopeTable# 1.2.12.1.1
	1
	2
	3
	4 --> (degree_to_tree,ID)
	5 --> (Node,ID)
	6
	7 --> (other,ID)
	8
	9
	10
	ScopeTable# 1.2.12.1
	1 --> (degree,ID)
	2 --> (current,ID) --> (trees,ID)
	3
	4 --> (degree_to_tree,ID)
	5 --> (Node,ID) --> (erase,ID)
	6
	7
	8 --> (begin,ID) --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2.12
	1 --> (log2,ID)
	2 --> (trees,ID)
	3 --> (static_cast,ID)
	4 --> (max_degree,ID) --> (vector,ID) --> (degree_to_tree,ID) --> (empty,ID)
	5 --> (Node,ID)
	6
	7 --> (floor,ID)
	8 --> (count,ID) --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 129: Token <LSQUARE> Lexeme [ found
Line# 129: Token <ID> Lexeme degree found
	ScopeTable# 1.2.12.1.1
	1 --> (degree,ID)
	2
	3
	4 --> (degree_to_tree,ID)
	5 --> (Node,ID)
	6
	7 --> (other,ID)
	8
	9
	10
	ScopeTable# 1.2.12.1
	1 --> (degree,ID)
	2 --> (current,ID) --> (trees,ID)
	3
	4 --> (degree_to_tree,ID)
	5 --> (Node,ID) --> (erase,ID)
	6
	7
	8 --> (begin,ID) --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2.12
	1 --> (log2,ID)
	2 --> (trees,ID)
	3 --> (static_cast,ID)
	4 --> (max_degree,ID) --> (vector,ID) --> (degree_to_tree,ID) --> (empty,ID)
	5 --> (Node,ID)
	6
	7 --> (floor,ID)
	8 --> (count,ID) --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 129: Token <RSQUARE> Lexeme ] found
Line# 129: Token <SEMICOLON> Lexeme ; found
Line# 130: Token <ID> Lexeme degree_to_tree found
	degree_to_tree already exists in the current ScopeTable
Line# 130: Token <LSQUARE> Lexeme [ found
Line# 130: Token <ID> Lexeme degree found
	degree already exists in the current ScopeTable
Line# 130: Token <RSQUARE> Lexeme ] found
Line# 130: Token <ASSIGNOP> Lexeme = found
Line# 130: Token <ID> Lexeme nullptr found
	ScopeTable# 1.2.12.1.1
	1 --> (degree,ID)
	2
	3
	4 --> (degree_to_tree,ID)
	5 --> (Node,ID)
	6
	7 --> (other,ID)
	8 --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2.12.1
	1 --> (degree,ID)
	2 --> (current,ID) --> (trees,ID)
	3
	4 --> (degree_to_tree,ID)
	5 --> (Node,ID) --> (erase,ID)
	6
	7
	8 --> (begin,ID) --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2.12
	1 --> (log2,ID)
	2 --> (trees,ID)
	3 --> (static_cast,ID)
	4 --> (max_degree,ID) --> (vector,ID) --> (degree_to_tree,ID) --> (empty,ID)
	5 --> (Node,ID)
	6
	7 --> (floor,ID)
	8 --> (count,ID) --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 130: Token <SEMICOLON> Lexeme ; found
Line# 131: Token <IF> Lexeme if found
Line# 131: Token <LPAREN> Lexeme ( found
Line# 131: Token <ID> Lexeme current found
	ScopeTable# 1.2.12.1.1
	1 --> (degree,ID)
	2 --> (current,ID)
	3
	4 --> (degree_to_tree,ID)
	5 --> (Node,ID)
	6
	7 --> (other,ID)
	8 --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2.12.1
	1 --> (degree,ID)
	2 --> (current,ID) --> (trees,ID)
	3
	4 --> (degree_to_tree,ID)
	5 --> (Node,ID) --> (erase,ID)
	6
	7
	8 --> (begin,ID) --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2.12
	1 --> (log2,ID)
	2 --> (trees,ID)
	3 --> (static_cast,ID)
	4 --> (max_degree,ID) --> (vector,ID) --> (degree_to_tree,ID) --> (empty,ID)
	5 --> (Node,ID)
	6
	7 --> (floor,ID)
	8 --> (count,ID) --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 131: Token <ADDOP> Lexeme - found
Line# 131: Token <RELOP> Lexeme > found
Line# 131: Token <ID> Lexeme value found
	ScopeTable# 1.2.12.1.1
	1 --> (degree,ID)
	2 --> (current,ID)
	3
	4 --> (degree_to_tree,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (other,ID)
	8 --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2.12.1
	1 --> (degree,ID)
	2 --> (current,ID) --> (trees,ID)
	3
	4 --> (degree_to_tree,ID)
	5 --> (Node,ID) --> (erase,ID)
	6
	7
	8 --> (begin,ID) --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2.12
	1 --> (log2,ID)
	2 --> (trees,ID)
	3 --> (static_cast,ID)
	4 --> (max_degree,ID) --> (vector,ID) --> (degree_to_tree,ID) --> (empty,ID)
	5 --> (Node,ID)
	6
	7 --> (floor,ID)
	8 --> (count,ID) --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 131: Token <RELOP> Lexeme < found
Line# 131: Token <ID> Lexeme other found
	other already exists in the current ScopeTable
Line# 131: Token <ADDOP> Lexeme - found
Line# 131: Token <RELOP> Lexeme > found
Line# 131: Token <ID> Lexeme value found
	value already exists in the current ScopeTable
Line# 131: Token <RPAREN> Lexeme ) found
Line# 131: Token <LCURL> Lexeme { found
Line# 132: Token <ID> Lexeme _link found
	ScopeTable# 1.2.12.1.1.1
	1
	2
	3
	4
	5
	6
	7
	8
	9
	10 --> (_link,ID)
	ScopeTable# 1.2.12.1.1
	1 --> (degree,ID)
	2 --> (current,ID)
	3
	4 --> (degree_to_tree,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (other,ID)
	8 --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2.12.1
	1 --> (degree,ID)
	2 --> (current,ID) --> (trees,ID)
	3
	4 --> (degree_to_tree,ID)
	5 --> (Node,ID) --> (erase,ID)
	6
	7
	8 --> (begin,ID) --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2.12
	1 --> (log2,ID)
	2 --> (trees,ID)
	3 --> (static_cast,ID)
	4 --> (max_degree,ID) --> (vector,ID) --> (degree_to_tree,ID) --> (empty,ID)
	5 --> (Node,ID)
	6
	7 --> (floor,ID)
	8 --> (count,ID) --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 132: Token <LPAREN> Lexeme ( found
Line# 132: Token <ID> Lexeme current found
	ScopeTable# 1.2.12.1.1.1
	1
	2 --> (current,ID)
	3
	4
	5
	6
	7
	8
	9
	10 --> (_link,ID)
	ScopeTable# 1.2.12.1.1
	1 --> (degree,ID)
	2 --> (current,ID)
	3
	4 --> (degree_to_tree,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (other,ID)
	8 --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2.12.1
	1 --> (degree,ID)
	2 --> (current,ID) --> (trees,ID)
	3
	4 --> (degree_to_tree,ID)
	5 --> (Node,ID) --> (erase,ID)
	6
	7
	8 --> (begin,ID) --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2.12
	1 --> (log2,ID)
	2 --> (trees,ID)
	3 --> (static_cast,ID)
	4 --> (max_degree,ID) --> (vector,ID) --> (degree_to_tree,ID) --> (empty,ID)
	5 --> (Node,ID)
	6
	7 --> (floor,ID)
	8 --> (count,ID) --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 132: Token <COMMA> Lexeme , found
Line# 132: Token <ID> Lexeme other found
	ScopeTable# 1.2.12.1.1.1
	1
	2 --> (current,ID)
	3
	4
	5
	6
	7 --> (other,ID)
	8
	9
	10 --> (_link,ID)
	ScopeTable# 1.2.12.1.1
	1 --> (degree,ID)
	2 --> (current,ID)
	3
	4 --> (degree_to_tree,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (other,ID)
	8 --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2.12.1
	1 --> (degree,ID)
	2 --> (current,ID) --> (trees,ID)
	3
	4 --> (degree_to_tree,ID)
	5 --> (Node,ID) --> (erase,ID)
	6
	7
	8 --> (begin,ID) --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2.12
	1 --> (log2,ID)
	2 --> (trees,ID)
	3 --> (static_cast,ID)
	4 --> (max_degree,ID) --> (vector,ID) --> (degree_to_tree,ID) --> (empty,ID)
	5 --> (Node,ID)
	6
	7 --> (floor,ID)
	8 --> (count,ID) --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 132: Token <RPAREN> Lexeme ) found
Line# 132: Token <SEMICOLON> Lexeme ; found
Line# 133: Token <RCURL> Lexeme } found
Line# 133: Token <ELSE> Lexeme else found
Line# 133: Token <LCURL> Lexeme { found
Line# 134: Token <ID> Lexeme _link found
	ScopeTable# 1.2.12.1.1.2
	1
	2
	3
	4
	5
	6
	7
	8
	9
	10 --> (_link,ID)
	ScopeTable# 1.2.12.1.1
	1 --> (degree,ID)
	2 --> (current,ID)
	3
	4 --> (degree_to_tree,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (other,ID)
	8 --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2.12.1
	1 --> (degree,ID)
	2 --> (current,ID) --> (trees,ID)
	3
	4 --> (degree_to_tree,ID)
	5 --> (Node,ID) --> (erase,ID)
	6
	7
	8 --> (begin,ID) --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2.12
	1 --> (log2,ID)
	2 --> (trees,ID)
	3 --> (static_cast,ID)
	4 --> (max_degree,ID) --> (vector,ID) --> (degree_to_tree,ID) --> (empty,ID)
	5 --> (Node,ID)
	6
	7 --> (floor,ID)
	8 --> (count,ID) --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 134: Token <LPAREN> Lexeme ( found
Line# 134: Token <ID> Lexeme other found
	ScopeTable# 1.2.12.1.1.2
	1
	2
	3
	4
	5
	6
	7 --> (other,ID)
	8
	9
	10 --> (_link,ID)
	ScopeTable# 1.2.12.1.1
	1 --> (degree,ID)
	2 --> (current,ID)
	3
	4 --> (degree_to_tree,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (other,ID)
	8 --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2.12.1
	1 --> (degree,ID)
	2 --> (current,ID) --> (trees,ID)
	3
	4 --> (degree_to_tree,ID)
	5 --> (Node,ID) --> (erase,ID)
	6
	7
	8 --> (begin,ID) --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2.12
	1 --> (log2,ID)
	2 --> (trees,ID)
	3 --> (static_cast,ID)
	4 --> (max_degree,ID) --> (vector,ID) --> (degree_to_tree,ID) --> (empty,ID)
	5 --> (Node,ID)
	6
	7 --> (floor,ID)
	8 --> (count,ID) --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 134: Token <COMMA> Lexeme , found
Line# 134: Token <ID> Lexeme current found
	ScopeTable# 1.2.12.1.1.2
	1
	2 --> (current,ID)
	3
	4
	5
	6
	7 --> (other,ID)
	8
	9
	10 --> (_link,ID)
	ScopeTable# 1.2.12.1.1
	1 --> (degree,ID)
	2 --> (current,ID)
	3
	4 --> (degree_to_tree,ID)
	5 --> (Node,ID)
	6 --> (value,ID)
	7 --> (other,ID)
	8 --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2.12.1
	1 --> (degree,ID)
	2 --> (current,ID) --> (trees,ID)
	3
	4 --> (degree_to_tree,ID)
	5 --> (Node,ID) --> (erase,ID)
	6
	7
	8 --> (begin,ID) --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2.12
	1 --> (log2,ID)
	2 --> (trees,ID)
	3 --> (static_cast,ID)
	4 --> (max_degree,ID) --> (vector,ID) --> (degree_to_tree,ID) --> (empty,ID)
	5 --> (Node,ID)
	6
	7 --> (floor,ID)
	8 --> (count,ID) --> (nullptr,ID)
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 134: Token <RPAREN> Lexeme ) found
Line# 134: Token <SEMICOLON> Lexeme ; found
Line# 135: Token <ID> Lexeme current found
	current already exists in the current ScopeTable
Line# 135: Token <ASSIGNOP> Lexeme = found
Line# 135: Token <ID> Lexeme other found
	other already exists in the current ScopeTable
Line# 135: Token <SEMICOLON> Lexeme ; found
Line# 136: Token <RCURL> Lexeme } found
Line# 137: Token <ID> Lexeme degree found
	degree already exists in the current ScopeTable
Line# 137: Token <INCOP> Lexeme ++ found
Line# 137: Token <SEMICOLON> Lexeme ; found
Line# 138: Token <RCURL> Lexeme } found
Line# 139: Token <ID> Lexeme degree_to_tree found
	degree_to_tree already exists in the current ScopeTable
Line# 139: Token <LSQUARE> Lexeme [ found
Line# 139: Token <ID> Lexeme degree found
	degree already exists in the current ScopeTable
Line# 139: Token <RSQUARE> Lexeme ] found
Line# 139: Token <ASSIGNOP> Lexeme = found
Line# 139: Token <ID> Lexeme current found
	current already exists in the current ScopeTable
Line# 139: Token <SEMICOLON> Lexeme ; found
Line# 140: Token <RCURL> Lexeme } found
Line# 142: Token <ID> Lexeme min_node found
	ScopeTable# 1.2.12
	1 --> (log2,ID)
	2 --> (trees,ID)
	3 --> (static_cast,ID)
	4 --> (max_degree,ID) --> (vector,ID) --> (degree_to_tree,ID) --> (empty,ID)
	5 --> (Node,ID)
	6
	7 --> (floor,ID)
	8 --> (count,ID) --> (nullptr,ID)
	9
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 142: Token <ASSIGNOP> Lexeme = found
Line# 142: Token <ID> Lexeme nullptr found
	nullptr already exists in the current ScopeTable
Line# 142: Token <SEMICOLON> Lexeme ; found
Line# 143: Token <ID> Lexeme trees found
	trees already exists in the current ScopeTable
Error at line# 143: UNRECOGNIZED_CHAR .
Line# 143: Token <ID> Lexeme clear found
	ScopeTable# 1.2.12
	1 --> (log2,ID)
	2 --> (trees,ID)
	3 --> (static_cast,ID)
	4 --> (max_degree,ID) --> (vector,ID) --> (degree_to_tree,ID) --> (empty,ID)
	5 --> (Node,ID)
	6 --> (clear,ID)
	7 --> (floor,ID)
	8 --> (count,ID) --> (nullptr,ID)
	9
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 143: Token <LPAREN> Lexeme ( found
Line# 143: Token <RPAREN> Lexeme ) found
Line# 143: Token <SEMICOLON> Lexeme ; found
Line# 144: Token <FOR> Lexeme for found
Line# 144: Token <LPAREN> Lexeme ( found
Line# 144: Token <ID> Lexeme Node found
	Node already exists in the current ScopeTable
Line# 144: Token <MULOP> Lexeme * found
Line# 144: Token <ID> Lexeme tree found
	ScopeTable# 1.2.12
	1 --> (log2,ID)
	2 --> (trees,ID)
	3 --> (static_cast,ID)
	4 --> (max_degree,ID) --> (vector,ID) --> (degree_to_tree,ID) --> (empty,ID)
	5 --> (Node,ID)
	6 --> (clear,ID)
	7 --> (floor,ID)
	8 --> (count,ID) --> (nullptr,ID)
	9 --> (tree,ID)
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Error at line# 144: UNRECOGNIZED_CHAR :
Line# 144: Token <ID> Lexeme degree_to_tree found
	degree_to_tree already exists in the current ScopeTable
Line# 144: Token <RPAREN> Lexeme ) found
Line# 144: Token <LCURL> Lexeme { found
Line# 145: Token <IF> Lexeme if found
Line# 145: Token <LPAREN> Lexeme ( found
Line# 145: Token <ID> Lexeme tree found
	ScopeTable# 1.2.12.2
	1
	2
	3
	4
	5
	6
	7
	8
	9 --> (tree,ID)
	10
	ScopeTable# 1.2.12
	1 --> (log2,ID)
	2 --> (trees,ID)
	3 --> (static_cast,ID)
	4 --> (max_degree,ID) --> (vector,ID) --> (degree_to_tree,ID) --> (empty,ID)
	5 --> (Node,ID)
	6 --> (clear,ID)
	7 --> (floor,ID)
	8 --> (count,ID) --> (nullptr,ID)
	9 --> (tree,ID)
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 145: Token <RELOP> Lexeme != found
Line# 145: Token <ID> Lexeme nullptr found
	ScopeTable# 1.2.12.2
	1
	2
	3
	4
	5
	6
	7
	8 --> (nullptr,ID)
	9 --> (tree,ID)
	10
	ScopeTable# 1.2.12
	1 --> (log2,ID)
	2 --> (trees,ID)
	3 --> (static_cast,ID)
	4 --> (max_degree,ID) --> (vector,ID) --> (degree_to_tree,ID) --> (empty,ID)
	5 --> (Node,ID)
	6 --> (clear,ID)
	7 --> (floor,ID)
	8 --> (count,ID) --> (nullptr,ID)
	9 --> (tree,ID)
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 145: Token <RPAREN> Lexeme ) found
Line# 145: Token <LCURL> Lexeme { found
Line# 146: Token <ID> Lexeme trees found
	ScopeTable# 1.2.12.2.1
	1
	2 --> (trees,ID)
	3
	4
	5
	6
	7
	8
	9
	10
	ScopeTable# 1.2.12.2
	1
	2
	3
	4
	5
	6
	7
	8 --> (nullptr,ID)
	9 --> (tree,ID)
	10
	ScopeTable# 1.2.12
	1 --> (log2,ID)
	2 --> (trees,ID)
	3 --> (static_cast,ID)
	4 --> (max_degree,ID) --> (vector,ID) --> (degree_to_tree,ID) --> (empty,ID)
	5 --> (Node,ID)
	6 --> (clear,ID)
	7 --> (floor,ID)
	8 --> (count,ID) --> (nullptr,ID)
	9 --> (tree,ID)
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Error at line# 146: UNRECOGNIZED_CHAR .
Line# 146: Token <ID> Lexeme push_back found
	ScopeTable# 1.2.12.2.1
	1
	2 --> (trees,ID)
	3
	4
	5 --> (push_back,ID)
	6
	7
	8
	9
	10
	ScopeTable# 1.2.12.2
	1
	2
	3
	4
	5
	6
	7
	8 --> (nullptr,ID)
	9 --> (tree,ID)
	10
	ScopeTable# 1.2.12
	1 --> (log2,ID)
	2 --> (trees,ID)
	3 --> (static_cast,ID)
	4 --> (max_degree,ID) --> (vector,ID) --> (degree_to_tree,ID) --> (empty,ID)
	5 --> (Node,ID)
	6 --> (clear,ID)
	7 --> (floor,ID)
	8 --> (count,ID) --> (nullptr,ID)
	9 --> (tree,ID)
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 146: Token <LPAREN> Lexeme ( found
Line# 146: Token <ID> Lexeme tree found
	ScopeTable# 1.2.12.2.1
	1
	2 --> (trees,ID)
	3
	4
	5 --> (push_back,ID)
	6
	7
	8
	9 --> (tree,ID)
	10
	ScopeTable# 1.2.12.2
	1
	2
	3
	4
	5
	6
	7
	8 --> (nullptr,ID)
	9 --> (tree,ID)
	10
	ScopeTable# 1.2.12
	1 --> (log2,ID)
	2 --> (trees,ID)
	3 --> (static_cast,ID)
	4 --> (max_degree,ID) --> (vector,ID) --> (degree_to_tree,ID) --> (empty,ID)
	5 --> (Node,ID)
	6 --> (clear,ID)
	7 --> (floor,ID)
	8 --> (count,ID) --> (nullptr,ID)
	9 --> (tree,ID)
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 146: Token <RPAREN> Lexeme ) found
Line# 146: Token <SEMICOLON> Lexeme ; found
Line# 147: Token <IF> Lexeme if found
Line# 147: Token <LPAREN> Lexeme ( found
Line# 147: Token <ID> Lexeme min_node found
	ScopeTable# 1.2.12.2.1
	1
	2 --> (trees,ID)
	3
	4
	5 --> (push_back,ID)
	6
	7
	8
	9 --> (tree,ID)
	10 --> (min_node,ID)
	ScopeTable# 1.2.12.2
	1
	2
	3
	4
	5
	6
	7
	8 --> (nullptr,ID)
	9 --> (tree,ID)
	10
	ScopeTable# 1.2.12
	1 --> (log2,ID)
	2 --> (trees,ID)
	3 --> (static_cast,ID)
	4 --> (max_degree,ID) --> (vector,ID) --> (degree_to_tree,ID) --> (empty,ID)
	5 --> (Node,ID)
	6 --> (clear,ID)
	7 --> (floor,ID)
	8 --> (count,ID) --> (nullptr,ID)
	9 --> (tree,ID)
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 147: Token <RELOP> Lexeme == found
Line# 147: Token <ID> Lexeme nullptr found
	ScopeTable# 1.2.12.2.1
	1
	2 --> (trees,ID)
	3
	4
	5 --> (push_back,ID)
	6
	7
	8 --> (nullptr,ID)
	9 --> (tree,ID)
	10 --> (min_node,ID)
	ScopeTable# 1.2.12.2
	1
	2
	3
	4
	5
	6
	7
	8 --> (nullptr,ID)
	9 --> (tree,ID)
	10
	ScopeTable# 1.2.12
	1 --> (log2,ID)
	2 --> (trees,ID)
	3 --> (static_cast,ID)
	4 --> (max_degree,ID) --> (vector,ID) --> (degree_to_tree,ID) --> (empty,ID)
	5 --> (Node,ID)
	6 --> (clear,ID)
	7 --> (floor,ID)
	8 --> (count,ID) --> (nullptr,ID)
	9 --> (tree,ID)
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 147: Token <LOGICOP> Lexeme || found
Line# 147: Token <ID> Lexeme tree found
	tree already exists in the current ScopeTable
Line# 147: Token <ADDOP> Lexeme - found
Line# 147: Token <RELOP> Lexeme > found
Line# 147: Token <ID> Lexeme value found
	ScopeTable# 1.2.12.2.1
	1
	2 --> (trees,ID)
	3
	4
	5 --> (push_back,ID)
	6 --> (value,ID)
	7
	8 --> (nullptr,ID)
	9 --> (tree,ID)
	10 --> (min_node,ID)
	ScopeTable# 1.2.12.2
	1
	2
	3
	4
	5
	6
	7
	8 --> (nullptr,ID)
	9 --> (tree,ID)
	10
	ScopeTable# 1.2.12
	1 --> (log2,ID)
	2 --> (trees,ID)
	3 --> (static_cast,ID)
	4 --> (max_degree,ID) --> (vector,ID) --> (degree_to_tree,ID) --> (empty,ID)
	5 --> (Node,ID)
	6 --> (clear,ID)
	7 --> (floor,ID)
	8 --> (count,ID) --> (nullptr,ID)
	9 --> (tree,ID)
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 147: Token <RELOP> Lexeme < found
Line# 147: Token <ID> Lexeme min_node found
	min_node already exists in the current ScopeTable
Line# 147: Token <ADDOP> Lexeme - found
Line# 147: Token <RELOP> Lexeme > found
Line# 147: Token <ID> Lexeme value found
	value already exists in the current ScopeTable
Line# 147: Token <RPAREN> Lexeme ) found
Line# 147: Token <LCURL> Lexeme { found
Line# 148: Token <ID> Lexeme min_node found
	ScopeTable# 1.2.12.2.1.1
	1
	2
	3
	4
	5
	6
	7
	8
	9
	10 --> (min_node,ID)
	ScopeTable# 1.2.12.2.1
	1
	2 --> (trees,ID)
	3
	4
	5 --> (push_back,ID)
	6 --> (value,ID)
	7
	8 --> (nullptr,ID)
	9 --> (tree,ID)
	10 --> (min_node,ID)
	ScopeTable# 1.2.12.2
	1
	2
	3
	4
	5
	6
	7
	8 --> (nullptr,ID)
	9 --> (tree,ID)
	10
	ScopeTable# 1.2.12
	1 --> (log2,ID)
	2 --> (trees,ID)
	3 --> (static_cast,ID)
	4 --> (max_degree,ID) --> (vector,ID) --> (degree_to_tree,ID) --> (empty,ID)
	5 --> (Node,ID)
	6 --> (clear,ID)
	7 --> (floor,ID)
	8 --> (count,ID) --> (nullptr,ID)
	9 --> (tree,ID)
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 148: Token <ASSIGNOP> Lexeme = found
Line# 148: Token <ID> Lexeme tree found
	ScopeTable# 1.2.12.2.1.1
	1
	2
	3
	4
	5
	6
	7
	8
	9 --> (tree,ID)
	10 --> (min_node,ID)
	ScopeTable# 1.2.12.2.1
	1
	2 --> (trees,ID)
	3
	4
	5 --> (push_back,ID)
	6 --> (value,ID)
	7
	8 --> (nullptr,ID)
	9 --> (tree,ID)
	10 --> (min_node,ID)
	ScopeTable# 1.2.12.2
	1
	2
	3
	4
	5
	6
	7
	8 --> (nullptr,ID)
	9 --> (tree,ID)
	10
	ScopeTable# 1.2.12
	1 --> (log2,ID)
	2 --> (trees,ID)
	3 --> (static_cast,ID)
	4 --> (max_degree,ID) --> (vector,ID) --> (degree_to_tree,ID) --> (empty,ID)
	5 --> (Node,ID)
	6 --> (clear,ID)
	7 --> (floor,ID)
	8 --> (count,ID) --> (nullptr,ID)
	9 --> (tree,ID)
	10 --> (min_node,ID)
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 148: Token <SEMICOLON> Lexeme ; found
Line# 149: Token <RCURL> Lexeme } found
Line# 150: Token <RCURL> Lexeme } found
Line# 151: Token <RCURL> Lexeme } found
Line# 152: Token <RCURL> Lexeme } found
Line# 154: Token <SINGLE LINE COMMENT> Lexeme // Get the size of\
	 the heap found
Line# 156: Token <INT> Lexeme int found
Line# 156: Token <ID> Lexeme size found
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID) --> (size,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 156: Token <LPAREN> Lexeme ( found
Line# 156: Token <RPAREN> Lexeme ) found
Line# 156: Token <LCURL> Lexeme { found
Line# 157: Token <RETURN> Lexeme return found
Line# 157: Token <ID> Lexeme count found
	ScopeTable# 1.2.13
	1
	2
	3
	4
	5
	6
	7
	8 --> (count,ID)
	9
	10
	ScopeTable# 1.2
	1 --> (bool,ID) --> (is_empty,ID) --> (new_value,ID)
	2 --> (trees,ID) --> (get_min,ID) --> (_find_min,ID)
	3 --> (node,ID)
	4 --> (vector,ID) --> (other_heap,ID)
	5 --> (Node,ID) --> (delete_node,ID) --> (_consolidate,ID)
	6 --> (value,ID) --> (tree1,ID)
	7 --> (merge,ID) --> (tree2,ID)
	8 --> (public,ID) --> (count,ID) --> (BinomialHeap,ID) --> (_bubble_up,ID)
	9 --> (extract_min,ID) --> (decrease_key,ID)
	10 --> (min_node,ID) --> (insert,ID) --> (_link,ID) --> (size,ID)
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Line# 157: Token <SEMICOLON> Lexeme ; found
Line# 158: Token <RCURL> Lexeme } found
Line# 159: Token <RCURL> Lexeme } found
Line# 159: Token <SEMICOLON> Lexeme ; found
Line# 161: Token <SINGLE LINE COMMENT> Lexeme // This code is contributed by Susobhan Akhuli found
	ScopeTable# 1
	1 --> (include,ID) --> (stdc,ID)
	2
	3
	4
	5 --> (h,ID) --> (class,ID) --> (Node,ID)
	6
	7 --> (bits,ID)
	8 --> (BinomialHeap,ID)
	9 --> (using,ID)
	10 --> (namespace,ID) --> (std,ID)
Total lines: 162
Total errors: 28
Total warnings: 2
